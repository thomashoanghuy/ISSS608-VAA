[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608-VAA",
    "section": "",
    "text": "Welcome to Capybara’s homepage.\nThis is my website to practice Data Visualization and web-building skills"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html",
    "href": "TakehomeEx/TakehomeEx01.html",
    "title": "Takehome Exercise 1",
    "section": "",
    "text": "Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 should be used to prepare the analytical visualisation. It is available at Department of Statistics, Singapore(in short SingStat).\nLet’s examine the data.\nWe have 1 excel dataset under xlsx format. Inside we found 3 worksheets: 2022(Total) / 2022 (Male) / 2022 (Female).\nEach worksheet has 5 columns as followed:\n\n\n\n\n\n\nPlanning Areas represents the names for each planning areas in Singapore.\nSubzone further divides Planning area into small zones.\nAge group represents the age groups for population between 0 and 90, with interval of 5 years (0-4 / 5-9 / 10-14 etc…)\nType of Dwelling represents the types of housing in this census.\nTotal is the number of populations for each categories.\n\n3 worksheets, represents numbers for Male populations, Female Population and Total.\nOur tasks would be creating visualizations from these raw data. Our choices of visualization will be using Age-Sex pyramid."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#data-preparation",
    "href": "TakehomeEx/TakehomeEx01.html#data-preparation",
    "title": "Takehome Exercise 1",
    "section": "Data Preparation",
    "text": "Data Preparation\nFirst, Age-sex pyramid requires data to be split into male and females. The exercise also requires to split into 9 different planning areas.\nFirst we will copy the columns which contains the total number of male ( from 2022 (Male) worksheet ) and total number of female ( from 2022 (Female)) worksheet to 2022 (Total) worksheet, adding on as 6th and 7th columns.\n\n\n\n\n\nFrom here, we can create Pivot table which includes all the data under this worksheet.\n\n\n\n\n\nSelect entire worksheet 2022 (Total) as Data source\n\n\n\n\n\nThere will be a new worksheet created, as Pivot table.\nNow we will drag Planning Area to Rows box for the Pivot table. And we will choose Total as Values box \nNow we shall right click on the Sum of Total column and Sort from Largest to smallest. We will now select 9 most populous planning areas of Singapore. We shall filter and keep these 9 areas only.\n\nNext step, we drag in Males and Females (drag and drop to Pivot table Values box) and remove the Sums of Total from this Values box.\nWe will also add in the Age Group, under Rows box.\n\nWe will have a table of 9 most populous areas in Singapore, and their age-group smaller breakdown.\n\nWe will filter out the Total from these age group breakdown. (Because the total for each areas are already in bolden first row, so we don’t need this last row of Total anymore.\nWe shall copy this table and paste-special (values only) to a new worksheet.\n\nInsert a new column in between Rows Label and Sums of Male.\nCopy the age group over, we will separate: First column is only for name of Planning Areas ( Bedok, Choa Chu Kang, Hougang etc…) and second column will be only for Age Group."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#our-final-worksheet-we-will-have-a-similar-worksheet-like-this-under-worksheet-sheet1",
    "href": "TakehomeEx/TakehomeEx01.html#our-final-worksheet-we-will-have-a-similar-worksheet-like-this-under-worksheet-sheet1",
    "title": "Takehome Exercise 1",
    "section": "Our final worksheet, we will have a similar worksheet like this ( under worksheet Sheet1)",
    "text": "Our final worksheet, we will have a similar worksheet like this ( under worksheet Sheet1)"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#dashboard-building",
    "href": "TakehomeEx/TakehomeEx01.html#dashboard-building",
    "title": "Takehome Exercise 1",
    "section": "DASHBOARD BUILDING",
    "text": "DASHBOARD BUILDING\nOpen new Tableau window. Save and name it as your project.\nWe can drag the xlsx excel data into this Tableau window.\nDrag Sheet1 into the middle (this is the final data table above after data transformation from previous steps). We shall take this as our datasource.\nClick on Sheet 1 and we will create the first Tableau Sheet\n\nWe shall put drag these items to Columns: Sums of MALE , Sums of FEMALE and Rows: Planning Area\n\nNext, right click on one of the Axis and EDIT AXIS\n\nWe will tick the Reverse options, as well as rename the axis to “Male Population”\n\nWe shall repeat the same for Female side. (but do not tick the Reverse option).\nWe shall then right click Null value to exclude them from the filter\n\nFinally, we will have a pyramid graph, similar to this\n\n\n\n\n\nWe shall right on the Sheet 1, and duplicate this worksheet 9 times, one for each other areas.\nWe shall rename each worksheets as per each of the planning areas ( Bedok, Choa Chu Kang, Hougang etc…)\nThis is already a pyramid graph of Singapore populations for 9 most populous areas, but we still need to break down in term of age group.\n\nWe select Bedok sheet\nRight click on Filters of Planning Areas > Edit filters\n\nFor example, if this is worksheet for Bedok, we can exclude other areas.\n\nNext, we drag Age Group into Rows.\n\nRight click on Age Group > Filter > Exclude Total\nWe will have a pyramid graph for Bedok population only: Depict populations between Male and Female, with subsets of each age groups for Bedok areas only.\n\nNext is aesthetics, where we have to input colours to make things more distinctive.\nThe recommendation would be one half (Male) would be warm and light color, while the other half should carry darker and cold color.\n\nWe repeat the same steps above for all 9 planning areas. Remember to maintain the same color codes / formats for all 9 areas."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#lastly-we-can-building-dashboard.",
    "href": "TakehomeEx/TakehomeEx01.html#lastly-we-can-building-dashboard.",
    "title": "Takehome Exercise 1",
    "section": "Lastly, we can building Dashboard.",
    "text": "Lastly, we can building Dashboard.\nCreate new dashboard\n\nWe choose Floating as the setting and choose Vertical objects\n\nWe divide dashboard into 9 evenly horizontal rectangle containers. Next we drag each of the Sheets into each of these container.\n\n\nRemember to change Standard to Entire view to see entire graph.\nAlso click on Device Preview and view as Large Desktop Monitor (2560 x 1440) And click on Size ( default is Fixed) and change to Automatic.\nAfter dragging each planning areas into the container. Remove the labels and ledgers ( Plannings Areas, Sum of Male and Sums of Females.\nPlay around with the 9 planning areas (alignments of lines and borders, colours etc..)"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#final-results-would-look-similar-to-this.",
    "href": "TakehomeEx/TakehomeEx01.html#final-results-would-look-similar-to-this.",
    "title": "Takehome Exercise 1",
    "section": "Final results would look similar to this.",
    "text": "Final results would look similar to this."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#publishing-dashboard",
    "href": "TakehomeEx/TakehomeEx01.html#publishing-dashboard",
    "title": "Takehome Exercise 1",
    "section": "Publishing Dashboard",
    "text": "Publishing Dashboard\nFinally, we can go to Data / Sheet1 / Extract Data\nAfter data extraction (saving Tableau working as .hyper file), we can go to Server > Tableau Public > Save to Tableau Public.\nIf you have logged in to your Tableau public account, this will be uploaded as a new Viz under your profile.\nYou can view my published Viz under this link\nSingapore Population Distribution"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#summary",
    "href": "TakehomeEx/TakehomeEx01.html#summary",
    "title": "Takehome Exercise 1",
    "section": "SUMMARY",
    "text": "SUMMARY"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#commentaries-on-the-data",
    "href": "TakehomeEx/TakehomeEx01.html#commentaries-on-the-data",
    "title": "Takehome Exercise 1",
    "section": "Commentaries on the Data",
    "text": "Commentaries on the Data\nThere is a general assumption about Singapore population: Singapore is having an aging population. The general trend observable from the pyramid graphs of 9 different planning areas in Singapore show that they are all middle heavy (meaning the highest segment of population are among the working adults between 25- to 60 years old).\nWhile it is natural that the bottom of these pyramid graph, which represent the elderly populations, are small, due to death, it is indeed an evident of an aging population when most of the top portions of the pyramids are also small. This shows that Singaporean at family-planning age (at the age 25-60 years old) , are not having children, hence the low fertility rate and a smaller tops of the pyramids\nA closer look at different planning areas, can give us some patterns on different geographical distributions as well. Generally, other 7 out of 9 areas in this dashboard, for the age between 0 and 20, the younger, the smaller are the population numbers, while the adolescent population are largest among pre-adults’ population. Except Punggol and Sengkang, these 2 areas see the highest percentage of populations of children age, when compared to the rest of population of the area. This may suggest that Sengkang and Punggol are two areas where there are many young families / couples are having children.\nThe gender distribution of Singapore’s population is relatively balanced, However, there are slight variations in the gender distribution among different age groups. For example, among children aged 0-14, there are slightly more males than females. However, among adults aged 15-64, there are slightly more females than males. And among older adults aged 75 and above, there are more females than males. This is because female tend to have higher life expectancy than male.\nFurther breakdown by planning areas, Punggol and Sengkang are 2 areas with highest portion of populations among the 25-40 years old, millennial prime working populations, compared to the other age groups in the same areas. This means the average ages of population among these 2 areas would be lower, compared to other matured estates.\nIn conclusion, while some of areas of Singapore are consisting of younger populations and children / teenage populations, overall, Singapore is still foreseen to encounter an aging population. With majority of graphs are middle heavy ( the working adults age between 25-60), these segment of population will eventually grow older and move to older age groups, while the smaller top populations of children and teenagers are too small to replace the current working adult population. If this is not addressed urgently by the government, this will lead to many social and economic and healthcare problems for the country within next few decades."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx01.html#about-this-site.",
    "href": "TakehomeEx/TakehomeEx01.html#about-this-site.",
    "title": "Takehome Exercise 1",
    "section": "About this site.",
    "text": "About this site.\nThis is capybara first site that help me start learning Data visualization with many tools\n\nData Preparation and Cleaning with Excel\nData Visualization by Tableau\nWebsite Design by HTML and R Studio tools to create , render , commit onto Github and subsequently publishing on Netlify"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx02.html",
    "href": "TakehomeEx/TakehomeEx02.html",
    "title": "TakeHome Exercise 2",
    "section": "",
    "text": "In the first task, we are supposed to create Age-sex Pyramid to cover 9 planning areas of Singapore in term of Male/ Female and the age group.\nBelow is one of the DataViz that was created by a classmate.\nhttps://public.tableau.com/app/profile/ruipeng.wang/viz/take_home_01/Dashboard1?fbclid=IwAR1xjLcdtI9B6IQsXvE8DeuHGT0Xe1sL20M6RPAZ2gvhEV_hLizpZ9QdADg\n\nOriginal DataViz\nCritiques:\n\nClarity: The viz was created for 9 planning areas with 9 different populations. However, they use to same absolute scales in terms of number of people. Therefore, the areas with small number of populations ( Downtown Core and Outram) when putting in the same x-axis scale as other areas, does not have high enough number of people, to show case the distributions as Age-sex pyramid.\nClarity Some age groups have data labels ( number of people in that age group), however many age groups do not have any data labels. It looks like the data label are randomly assigned.\nAesthetics Age-sex pyramid of 9 area, should not occupy such big area of spaces (taking up entire horizontal dataviz). There are other designs that can save spaces for other graphs / charts that will portray more information from the data."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx02.html#age-sex-pyramid-graph-for-bedok",
    "href": "TakehomeEx/TakehomeEx02.html#age-sex-pyramid-graph-for-bedok",
    "title": "TakeHome Exercise 2",
    "section": "AGE-SEX PYRAMID GRAPH FOR BEDOK",
    "text": "AGE-SEX PYRAMID GRAPH FOR BEDOK\nWe use fill = bedok_df$ID (the new column added) is to separate the 2 genders.\n\nggplot(bedok_df,\n       aes( x = bedok_df$`Population Perc` , y = bedok_df$`AGE GROUP` , fill = bedok_df$ID ))+\n  geom_bar(stat = \"identity\") +\n  ggtitle(\"Distribution of Bedok\")+\n  ylab(\"AGE GROUP\")+\n  xlab(\"Percentage of Area Population\") +\n  labs(fill = \"Gender\")+\n  scale_x_continuous(breaks = scales::pretty_breaks(n = 10))\n\nWarning: Use of `` bedok_df$`Population Perc` `` is discouraged.\nℹ Use `Population Perc` instead.\n\n\nWarning: Use of `` bedok_df$`AGE GROUP` `` is discouraged.\nℹ Use `AGE GROUP` instead.\n\n\nWarning: Use of `bedok_df$ID` is discouraged.\nℹ Use `ID` instead.\n\n\n\n\n\nFinally we have created a Age-Sex pyramid, using percentage of the Population of the area, rather than their absolute numbers.\nAs such, even with the area of low population (like Outram or Downtown Core) , each age groups will still be better visualized using percentage of its own population.\nWe can repeat this same steps for any planning areas in our original data."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx02.html#pyramid-graph-for-9-planning-areas-population-by-gender",
    "href": "TakehomeEx/TakehomeEx02.html#pyramid-graph-for-9-planning-areas-population-by-gender",
    "title": "TakeHome Exercise 2",
    "section": "PYRAMID GRAPH FOR 9 PLANNING AREAS POPULATION, BY GENDER",
    "text": "PYRAMID GRAPH FOR 9 PLANNING AREAS POPULATION, BY GENDER\nWith the combined dataframe, we can draw the pyramid graph using the ggplot2 now\n\nggplot(sg_pop,\n       aes( x = Population , y = Area , fill = Gender))+\n  geom_bar(stat = \"identity\") +\n  ggtitle(\"SINGAPORE POPULATION DISTRIBUTION\")+\n  ylab(\"AREA\")+\n  xlab(\"Population\") +\n  labs(fill = \"Gender\")\n\n\n\n  scale_x_continuous(labels = scales::comma_format(big.mark = ',' , decimal.mark = '.') , breaks = scales::pretty_breaks(n = 5))\n\n<ScaleContinuousPosition>\n Range:  \n Limits:    0 --    1\n\n\nAs you can see, Outram and Downtown Core have the lowest number of population among the 9 chosen area. While Woodlands have the largest population."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx03.html",
    "href": "TakehomeEx/TakehomeEx03.html",
    "title": "Take Home Exercise 03",
    "section": "",
    "text": "In this take-home exercise, we will study the patterns of the resale prices of public housing property by residential towns and estates in Singapore by using appropriate analytical visualisation techniques learned in Lesson 4: Fundamentals of Visual Analytics.\nFor the purpose of this study, the focus should be on 3-ROOM, 4-ROOM and 5-ROOM types."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx03.html#room-average-resale-prices",
    "href": "TakehomeEx/TakehomeEx03.html#room-average-resale-prices",
    "title": "Take Home Exercise 03",
    "section": "4-ROOM average resale prices",
    "text": "4-ROOM average resale prices\n\nfour_roomdf1 = four_roomdf[c(\"month\"  , \"price_per_sqm\" )]\nfourrooms_monthly_avg2 = four_roomdf1 %>%\ngroup_by(month) %>%\nsummarise(average_price_sqm2 = mean(price_per_sqm))\n\n\np1 = ggplot(fourrooms_monthly_avg2, aes(x= fourrooms_monthly_avg2$month, y=fourrooms_monthly_avg2$average_price_sqm2 , group = 1)) +\n  geom_smooth() + geom_point()+\n  theme(axis.text.x=element_text(angle=90, hjust=1))+\n  xlab(\"Month\")+ylab(\"Average Price 4 room flat\")\n\np1"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx03.html#room-average-resale-prices-1",
    "href": "TakehomeEx/TakehomeEx03.html#room-average-resale-prices-1",
    "title": "Take Home Exercise 03",
    "section": "5-ROOM average resale prices",
    "text": "5-ROOM average resale prices\n\nfive_roomdf1 = five_roomdf[c(\"month\"  , \"price_per_sqm\" )]\nfiveroom_monthly_avg3 = five_roomdf1 %>%\ngroup_by(month) %>%\nsummarise(average_price_sqm2 = mean(price_per_sqm))\n\n\nfiveroom_monthly_avg4 <- fiveroom_monthly_avg3 %>%\n  separate(month,\n           into = c(\"year_no\", \"month_no\"),\n           sep = \"-\",\n           convert = TRUE)\n\n\np2 = ggplot(fiveroom_monthly_avg4, aes(x= fiveroom_monthly_avg3$month, y=fiveroom_monthly_avg3$average_price_sqm2 , group = 1)) +\n  geom_smooth() + geom_point()+\n  theme(axis.text.x=element_text(angle=90, hjust=1))+\n  xlab(\"Month\")+ylab(\"Average Price 5 room flat\")\n\nanimate (p2 + transition_time(fiveroom_monthly_avg4$month_no) + labs(title = \"Month from 2017 - 2023: {frame_time}\")) \n\n\n\n\nAs you can see, 4 rooms and 5 room types of flats have similar trends, from 2017, it was on the downtrend up til 2019 before started picking up and increased until current year 2023.\nThe difference are, for 4 room and 5 rooms units, there are some months where there are big outliers, and the standard deviation away from the trend-line are much bigger compared to 3-Room type of flats. This means for 4 rooms and 5 room types of flats, there are certain transactions that are priced at much different prices compared to the group’s trend line"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx03.html#averge-price-per-sqm-versus-lease-remains-number-of-years",
    "href": "TakehomeEx/TakehomeEx03.html#averge-price-per-sqm-versus-lease-remains-number-of-years",
    "title": "Take Home Exercise 03",
    "section": "AVERGE PRICE PER SQM versus LEASE REMAINS NUMBER OF YEARS",
    "text": "AVERGE PRICE PER SQM versus LEASE REMAINS NUMBER OF YEARS\n\np3 <-ggplot(df_345,\n       aes(x = lease_remains,\n           y = price_per_sqm ,\n           colour = flat_type)) +\n  geom_point() +\n  labs(title = \"Resale price per square meter verus Remaining lease years\",\n       x = \"Remaining Lease (Years)\",\n       y = \"Resale price ($psm)\",\n       fill =\"Flat type\",\n       caption = \"Month From 2017 - 2023: {frame_time}\")+\n  geom_smooth(method=\"lm\",\n              se = FALSE,\n              color = \"yellow\",\n              formula = y ~ x)+\n  facet_grid(flat_type ~ .)+\n  theme(legend.position = \"none\")+\n  transition_time(df_345$month_no) + ease_aes('linear')\n  \nanimate(p3, nframes = 10 , fps = 0.5)\n\n\n\n\nThe above charts show us that the average prices of HDB units in Singapore against the remaining lease years of the units for at least 3 groups, the 3-ROOM, 4 ROOM and 5 ROOM. While the yellow line shows that there are certain truth when the longer the remaining lease are, the higher the average prices of the units.\nHowever the steepness of the yellow line shows that the correlation is not really extreme, across 40 years between 50 years remaining units and 95 years units, the average price per square meter does not increase that much. In other words, this shows that even average values of HDB does not depreciate due to the lease running down."
  },
  {
    "objectID": "InClassExercise/inclass05/inclass05.html",
    "href": "InClassExercise/inclass05/inclass05.html",
    "title": "In-Class Exercise 05",
    "section": "",
    "text": "pacman::p_load(corrplot, tidyverse, ggstatsplot)\n\n#IMPORTING AND PREPARING THE DATASET#\n\nwine = read_csv(\"data/wine_quality.csv\")\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\npairs(wine[,1:11])\n\n\n\n\n\n#| fig-dpi: 75\n#these will affect the placement of the graph on the quarto page (maximum is 14)\n#fig dpi is default 30, if increase sharpness by increase to 75 or 100\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11, \n    ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n) \n\n\n\n\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n\n\n\n\n\nwine.cor = cor(wine[,1:11])\n\n\ncorrplot(wine.cor)\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n##Combining corrgram with the significant test##\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n###Reorder a corrgram By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n“AOE” is for the angular order of the eigenvectors. “FPC” for the first principal component order. “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used. “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”. “alphabet” for alphabetical order.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\npop_data <- read_csv(\"data/respopagsex2000to2018_tidy.csv\")  \n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\ntail(pop_data)\n\n# A tibble: 6 × 5\n  PA     SZ          AG         Year Population\n  <chr>  <chr>       <chr>     <dbl>      <dbl>\n1 Yishun Yishun West AGE85over  2013        400\n2 Yishun Yishun West AGE85over  2014        450\n3 Yishun Yishun West AGE85over  2015        510\n4 Yishun Yishun West AGE85over  2016        560\n5 Yishun Yishun West AGE85over  2017        590\n6 Yishun Yishun West AGE85over  2018        620\n\n\n\nagpop_mutated <- pop_data %>%\n  mutate(`Year` = as.character(Year))%>%\n  spread(AG, Population)%>%\n  mutate(YOUNG = rowSums(.[4:8]))%>%\n  mutate(ACTIVE = rowSums(.[9:16]))  %>%\n  mutate(OLD = rowSums(.[17:21])) %>%\n  mutate(TOTAL = rowSums(.[22:24])) %>%\n  filter(Year == 2018)%>%\n  filter(TOTAL > 0)\n\n\nagpop_mutated\n\n# A tibble: 234 × 25\n   PA        SZ    Year  AGE0-…¹ AGE05…² AGE10…³ AGE15…⁴ AGE20…⁵ AGE25…⁶ AGE30…⁷\n   <chr>     <chr> <chr>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Ang Mo K… Ang … 2018      180     270     320     300     260     300     270\n 2 Ang Mo K… Chen… 2018     1060    1080    1080    1260    1400    1880    1940\n 3 Ang Mo K… Chon… 2018      900     900    1030    1220    1380    1760    1830\n 4 Ang Mo K… Kebu… 2018      720     850    1010    1120    1230    1460    1330\n 5 Ang Mo K… Semb… 2018      220     310     380     500     550     500     300\n 6 Ang Mo K… Shan… 2018      550     630     670     780     950    1080     990\n 7 Ang Mo K… Tago… 2018      260     340     430     500     640     690     440\n 8 Ang Mo K… Town… 2018      830     930     930     860    1020    1400    1350\n 9 Ang Mo K… Yio … 2018      160     160     220     260     350     340     230\n10 Ang Mo K… Yio … 2018      810    1070    1300    1450    1500    1590    1390\n# … with 224 more rows, 15 more variables: `AGE35-39` <dbl>, `AGE40-44` <dbl>,\n#   `AGE45-49` <dbl>, `AGE50-54` <dbl>, `AGE55-59` <dbl>, `AGE60-64` <dbl>,\n#   `AGE65-69` <dbl>, `AGE70-74` <dbl>, `AGE75-79` <dbl>, `AGE80-84` <dbl>,\n#   AGE85over <dbl>, YOUNG <dbl>, ACTIVE <dbl>, OLD <dbl>, TOTAL <dbl>, and\n#   abbreviated variable names ¹​`AGE0-4`, ²​`AGE05-9`, ³​`AGE10-14`, ⁴​`AGE15-19`,\n#   ⁵​`AGE20-24`, ⁶​`AGE25-29`, ⁷​`AGE30-34`\n\n\n\nagpop_mutated %>%\nselect(\"PA\" , \"SZ\" , \"YOUNG\" , \"ACTIVE\" , \"OLD\" , \"TOTAL\")\n\n# A tibble: 234 × 6\n   PA         SZ                     YOUNG ACTIVE   OLD TOTAL\n   <chr>      <chr>                  <dbl>  <dbl> <dbl> <dbl>\n 1 Ang Mo Kio Ang Mo Kio Town Centre  1330   2770   730  4830\n 2 Ang Mo Kio Cheng San               5880  16970  5480 28330\n 3 Ang Mo Kio Chong Boon              5430  15700  5960 27090\n 4 Ang Mo Kio Kebun Bahru             4930  13300  4780 23010\n 5 Ang Mo Kio Sembawang Hills         1960   3620  1200  6780\n 6 Ang Mo Kio Shangri-La              3580   9600  3360 16540\n 7 Ang Mo Kio Tagore                  2170   4650  1300  8120\n 8 Ang Mo Kio Townsville              4570  12580  4800 21950\n 9 Ang Mo Kio Yio Chu Kang East       1150   2410   640  4200\n10 Ang Mo Kio Yio Chu Kang West       6130  14580  4270 24980\n# … with 224 more rows\n\n\n\npacman::p_load(ggtern, plotly, tidyverse)\n\n\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) + geom_point()+\n  labs(title = \"Population Structure, 2015\")+\n  theme_rgbg()\n\n\n\n\n##If you write it in basic plot_ly, the graph will be more interactive interface compared to using ggtern##\n\nlabel <- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\naxis <- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes <- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %>%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\nNo scatterternary mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\nwh <- read_csv(\"data/WHData-2018.csv\")\n\nRows: 156 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): Country, Region\ndbl (10): Happiness score, Whisker-high, Whisker-low, Dystopia, GDP per capi...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nrow.names(wh) <- wh$Country\n\nWarning: Setting row names on a tibble is deprecated.\n\n\n##Purpose of the above step is to take the column Country TO MAKE THEM the names of the rows in the dataframe, instead of automatic 1,2,3,4 numeric name##\n\nwh\n\n# A tibble: 156 × 12\n   Country        Region Happi…¹ Whisk…² Whisk…³ Dysto…⁴ GDP p…⁵ Socia…⁶ Healt…⁷\n * <chr>          <chr>    <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n 1 Albania        Centr…    4.59    4.70    4.48    1.46   0.916   0.817   0.79 \n 2 Bosnia and He… Centr…    5.13    5.22    5.04    1.88   0.915   1.08    0.758\n 3 Bulgaria       Centr…    4.93    5.02    4.84    1.22   1.05    1.52    0.712\n 4 Croatia        Centr…    5.32    5.40    5.24    1.77   1.12    1.16    0.737\n 5 Czech Republic Centr…    6.71    6.78    6.64    2.49   1.23    1.49    0.854\n 6 Estonia        Centr…    5.74    5.82    5.66    1.46   1.2     1.53    0.737\n 7 Hungary        Centr…    5.62    5.70    5.54    1.97   1.17    1.40    0.732\n 8 Kosovo         Centr…    5.66    5.76    5.57    2.26   0.855   1.23    0.578\n 9 Latvia         Centr…    5.93    6.00    5.86    2.14   1.15    1.45    0.671\n10 Lithuania      Centr…    5.95    6.04    5.87    2.13   1.20    1.53    0.716\n# … with 146 more rows, 3 more variables: `Freedom to make life choices` <dbl>,\n#   Generosity <dbl>, `Perceptions of corruption` <dbl>, and abbreviated\n#   variable names ¹​`Happiness score`, ²​`Whisker-high`, ³​`Whisker-low`,\n#   ⁴​Dystopia, ⁵​`GDP per capita`, ⁶​`Social support`, ⁷​`Healthy life expectancy`\n\n\n\nwh1 <- dplyr::select(wh, c(3, 7:12))\nwh_matrix <- data.matrix(wh)\n\n##wh_matrix is MATRIX, not a data table as per original wh dataframe anymore. We can only draw heatmap on matrix, rather than plain dataframe.##\n###We use heatmaply to draw this matrix into heatmap, notice that the graph is interactive!###\n\nwh_heatmap <- heatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\nwh_heatmap\n\n\n\n\n\n###Note: Normalising method### When variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations. This preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\nOn other hands, ###Note: Percentising method### 1) This is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank. 2) This is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile. 3) The benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n#Clustering Algo# heatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n##1) Manual approach## In the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n##2) Statistical approach## ###First, we have to find best clustering method should be used on this dataset### We use dend_expend for this\n\nwh_d <- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nAs you can see, average method is the most optimum with the highest score 0.67\n###Second, we need to find what is the optimal number of cluster### We should use find_k() for this step\n\nwh_clust <- hclust(wh_d, method = \"average\")\nnum_k <- find_k(wh_clust)\nplot(num_k)\n\n\n\n\nAs we can see, the optimal k = 3.\nWith that, we can use this statistical analysis result to do the code\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n#Finishing# In the code chunk below the following arguments are used:\nk_row is used to produce 5 groups. margins is used to change the top margin to 60 and row margin to 200. fontsizw_row and fontsize_col are used to change the font size for row and column labels to 4. main is used to write the main title of the plot. xlab and ylab are used to write the x-axis and y-axis labels respectively.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )\n\n\n\n\n\n##Plotting Static Parallel Coordinates Plot##\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n##Plotting Static Parallel Coordinates with BOX PLOT##\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\nWarning: The following aesthetics were dropped during statistical transformation: colour\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n##DRAWING PARALLEL COORDINATE WITH PARRALLEL PLOT USING parallelplot, will allow BRUSHING (INTERACTIVE)## Mean you can choose a column (for example Happiness Score) and we can highlight a portion of that column, and it will make highlight the rest of the data.\nWe can see what whether people with highest happiness score, such as 8 / 7.5 / 7, whether they have highest GDP, highest SOCIAL SUPPORT or HEALTHY LIFE EXPECTATION\n\nwh <- wh %>%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\nhistoVisibility <- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "HandsonExercise/handsonex01.html",
    "href": "HandsonExercise/handsonex01.html",
    "title": "HandsonEx01",
    "section": "",
    "text": "Install and Launching R packages The code chunk below use p_load of pacman package to check if tidyverse packages are installed in te environment, it will luanch it into R if it has been installed.\n\npacman::p_load(tidyverse, ggplot2, forcats)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\", \n                      show_col_types = FALSE)\n\nView Math Result using R hist\n\nhist(exam_data$MATHS,\n     main = \"Histogram of Maths Exams Result\",\n     xlab = \"Score\",\n     xlim = c(0, 100),\n     ylab = \"Count\",\n     ylim = c(0, 80),\n     col = \"green\",\n     freq = TRUE)\n\n\n\n\nDo the same thing but in ggplot\n\nggplot(data = exam_data, aes(x = MATHS)) + \n  \n  geom_histogram(bins = 10, \n                 boundary = 100, \n                 color = \"black\",\n                 fill = \"lightblue\") +\n  \n  labs(title = \"Histogram of Math Exam Results\", \n       subtitle = \"Maths\",\n       x = \"Score\",\n       y = \"Count\") +\n  \n  theme_bw()\n\n\n\n\nOn ggplot2, you can use other types of graphs and not only restricted to 1 function\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_dotplot(binwidth = 2.5, dotsize = 0.5) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  theme_bw()\n\n\n\n\nView Math Result using ggplot2 histogram, notice the smaller number of bins\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 color = \"black\",\n                 fill = \"lightblue\") +\n  theme_bw()\n\n\n\n\nNow to combine with other information, such as gender.\n\nggplot(data = exam_data,\n       aes(x = MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins = 20,\n                 color = \"lightblue\")+\n  theme_bw()\n\n\n\n\nComparing between 2 genders by ggplot density\n\nggplot(data = exam_data,\n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density() + \n  theme_bw()\n\n\n\n\nGgplot Boxplot (notched)\n\nggplot(data = exam_data,\n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot(notch = TRUE) +\n  theme_bw()\n\n\n\n\nGGPLOT Boxplot and Point\n\nggplot(data = exam_data,\n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +\n  geom_point(position = \"jitter\", size = 0.5) + \n  theme_bw()\n\n\n\n\nGGplot Boxplot with Violin plot\n\nggplot(data = exam_data,\n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_violin(fill = \"lightblue\") +\n  geom_boxplot(alpha = 0.5) + \n  theme_bw()\n\n\n\n\nNow, you can combine boxplot with Stats summary (mean)\n\nggplot(data = exam_data,\n       aes(y = MATHS, \n           x = GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",\n               fun = \"mean\",\n               colour = \"red\",\n               size = 4) + \n  theme_bw()\n\n\n\n\nNOTE: Math score is a continuous variable , while Gender is nominal variable (categorized and cannot be organized into orders/sequences), we can use boxplot to draw the Bivariate relationship between these 2 types of variables\nHowever, but TWO continuous variables, we can use something else\nGGPLOT geom_point between English and Maths scores ( also known as Scatterplot )\n\nggplot(data = exam_data,\n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() + \n  theme_bw()\n\n\n\n\nNow if we attempt to draw a fitted line through this scatterplot to see the trend\n\nggplot(data = exam_data,\n       aes(x = MATHS, \n           y = ENGLISH)) +\n  geom_point() +\n  # default method used for smooth is loess\n  # geom_smooth(linewidth = 0.5)\n  geom_smooth(linewidth = 0.5, method = lm) +\n  coord_cartesian(xlim = c(0, 100), ylim = c(0, 100)) + #this is to make sure both axis start from 0 and max = 100\n  theme_bw()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nView results by splitting them into each classes (try with historgram) by this function facet_wrap\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_wrap(~ CLASS) + \n  theme_bw()\n\n\n\n\ninstead, if we use facet_grid\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20) +\n    facet_grid(~ CLASS) + \n  theme_bw()\n\n\n\n\nFacet_grid can look better if one of the variables are of smaller number of categories, such as gender\n\nggplot(data = exam_data, aes(y = MATHS, x = CLASS)) +\n  geom_boxplot() + \n    facet_grid(cols = vars(GENDER)) + \n      theme_bw()\n\n\n\n\nOr we can split them horizontally by using facet_grid(rows*)\n\nggplot(data = exam_data, aes(y = MATHS, x = CLASS)) +\n  geom_boxplot() + \n    facet_grid(rows = vars(GENDER)) +\n      theme_bw()\n\n\n\n\nSame thing, we can play around with theme. First we plot b ggplot, use coord_flip() to flip the axis Then we assign the plot to a variable P, then we can design the theme() separately\n\np <- ggplot(data = exam_data, \n            aes(x = RACE)) +\n\n      geom_bar() + \n  \n      coord_flip()\n\np + theme(panel.background = \n            element_rect(fill = \"lightblue\", \n              colour = NULL)\n          )\n\n\n\n\n#ADDING IN DATA INTO THE VISUALIZATION OF GGPLOT#\nWe calculate the percentage of races of each students by using mutate() to add in new column for exam_data table. And we use fct_infreg() on RACE column to calculate the percentage of each race.\nGeom_text is to add in the percentages for each of the columns\n\npct_format = scales::percent_format(accuracy = .1)\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n\nggplot((aes(x = RACE))) +geom_bar() +\n  geom_text(aes(label = sprintf('%d (%s)', \n                            after_stat(count), \n                            pct_format(after_stat(count) / sum(after_stat(count)))\n                            )\n                ),\n            stat=\"count\",\n            nudge_y = 8 ) +\n  labs(title = \"No. of Pupils by Race in Exam Results\", \n       y=\"No. of Pupils\") \n\n\n\n\nIf you want to add in colors for each bar by adding in fill for geom_bar aes() = geom_bar(aes(fill = RACE ), show.legend = TRUE)\n\npct_format = scales::percent_format(accuracy = .1)\n\nexam_data %>%\n  mutate(RACE = fct_infreq(RACE)) %>%\n\nggplot((aes(x = RACE))) +geom_bar(aes(fill = RACE ), show.legend = TRUE ) +\n  geom_text(aes(label = sprintf('%d (%s)', \n                            after_stat(count), \n                            pct_format(after_stat(count) / sum(after_stat(count)))\n                            )\n                ),\n            stat=\"count\",\n            nudge_y = 8 ) +\n  labs(title = \"No. of Pupils by Race in Exam Results\", \n       y=\"No. of Pupils\") \n\n\n\n\n##Adding in Means and median lines on Histogram diagram above##\nWe can add in geom_vline and use xintercept = mean of the Math score AND xintercept = median\n\nggplot(data = exam_data, aes(x = MATHS)) +\n\n  geom_histogram(bins = 20, color = \"brown\", fill=\"grey\") +\n  \n  geom_vline(xintercept = mean(exam_data$MATHS), \n             linetype=\"dashed\", \n             linewidth=1, \n             colour=\"red\") + \n  \n  geom_vline(xintercept = median(exam_data$MATHS), \n             linetype=\"dashed\", \n             linewidth=1, \n             colour=\"black\") + \n  \n  theme_bw()\n\n\n\n\n###WHAT IF WE PLOT TWO geom_histogram at the same time, but we use fill= Gender and use facet_grid to seperate them by gender### The overall entire ENGLISH score lightgrey color is in the background, however, the 2nd histogram is filled with aes(fill= GENDER) and facet_grid seperate them into 2 diagrams Without this facet_grid, 2 geom_histogram will basically plot the same data and the lightgrey graph will not appear.\n\nggplot(data = exam_data, aes(x = ENGLISH)) +\n  geom_histogram(data = exam_data[\"ENGLISH\"], \n                 bins = 20, \n                 fill=\"lightgrey\", \n                 alpha=0.5) +\n  geom_histogram(aes(fill=GENDER), \n                 col=\"black\", \n                 bins = 20) +\n  facet_grid(cols = vars(GENDER)) +\n  theme_bw()\n\n\n\n\nWe can use geom_vline and geom_hline to create a fix scale on the graph. coor_cartesian will force both x and y axis to have the same min =0 and max = 100\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  \n  geom_point() + \n  \n  geom_vline(xintercept = mean(50), \n             linetype=\"dashed\", \n             linewidth=1, \n             colour=\"grey\") +\n  \n  geom_hline(yintercept = mean(50), \n             linetype=\"dashed\", \n             linewidth=1, \n             colour=\"grey\") + \n  \n  coord_cartesian(xlim = c(0, 100), \n                  ylim = c(0, 100)) + \n  theme_bw()\n\n\n\n\nHowever, above geom_vline and geom_hline, we fixed the x_intercept = 50 and y_intercept = 50 What if we set them = mean of the data.\n\nggplot(data = exam_data,\n       aes(x = MATHS, y = ENGLISH)) +\n  \n  geom_point() + \n  \n  geom_vline(xintercept = mean(exam_data$MATHS), \n             linetype=\"dashed\", \n             linewidth=1, \n             colour=\"grey\") +\n  \n  geom_hline(yintercept = mean(exam_data$ENGLISH), \n             linetype=\"dashed\", \n             linewidth=1, \n             colour=\"grey\") + \n  \n  coord_cartesian(xlim = c(0, 100), \n                  ylim = c(0, 100)) + \n  theme_bw()"
  },
  {
    "objectID": "HandsonExercise/Hands-on_Ex06-VisTime.html",
    "href": "HandsonExercise/Hands-on_Ex06-VisTime.html",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a horizon chart"
  },
  {
    "objectID": "HandsonExercise/Hands-on_Ex06-VisTime.html#getting-started",
    "href": "HandsonExercise/Hands-on_Ex06-VisTime.html#getting-started",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\n::: callout-info ## Do It Yourself Write a code chunk to check, install and launch the following R packages: scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table and tidyverse.\n\n\nShow the code\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, tidyverse, readxl, knitr, data.table)"
  },
  {
    "objectID": "HandsonExercise/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "href": "HandsonExercise/Hands-on_Ex06-VisTime.html#plotting-calendar-heatmap",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\nIn this section, you will learn how to plot a calender heatmap programmetically by using ggplot2 package.\n\nBy the end of this section, you will be able to:\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nThe Data\nFor the purpose of this hands-on exercise, eventlog.csv file will be used. This data file consists of 199,999 rows of time-series cyber attack records by country.\n\n\nImporting the data\nFirst, you will use the code chunk below to import eventlog.csv file into R environment and called the data frame as attacks.\n\nattacks <- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining the data structure\nIt is always a good practice to examine the imported data frame before further analysis is performed.\nFor example, kable() can be used to review the structure of the imported data frame.\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nThere are three columns, namely timestamp, source_country and tz.\n\ntimestamp field stores date-time values in POSIXct format.\nsource_country field stores the source of the attack. It is in ISO 3166-1 alpha-2 country code.\n\ntz field stores time zone of the source IP address.\n\n\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\n\n\nData Preparation\nStep 1: Deriving weekday and hour of day fields\nBefore we can plot the calender heatmap, two new fields namely wkday and hour need to be derived. In this step, we will write a function to perform the task.\n\nmake_hr_wkday <- function(ts, sc, tz) {\n  real_times <- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt <- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nNote: ymd_hms() and hour() are from lubridate package and weekdays() is a base R function.\nStep 2: Deriving the attacks tibble data frame\n\nwkday_levels <- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks <- attacks %>%\n  group_by(tz) %>%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %>% \n  ungroup() %>% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\nNote: Beside extracting the necessary data into attacks data frame, mutate() of dplyr package is used to convert wkday and hour fields into factor so they’ll be ordered when plotting\nTable below shows the tidy tibble table after processing.\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the Calendar Heatmaps\n\ngrouped <- attacks %>% \n  count(wkday, hour) %>% \n  ungroup() %>%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\nThings to learn from the code chunk: - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\n\n\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data.\n\n\nBuilding Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country <- count(\n  attacks, source_country) %>%\n  mutate(percent = percent(n/sum(n))) %>%\n  arrange(desc(n))\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\ntop4 <- attacks_by_country$source_country[1:4]\ntop4_attacks <- attacks %>%\n  filter(source_country %in% top4) %>%\n  count(source_country, wkday, hour) %>%\n  ungroup() %>%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %>%\n  na.omit()\n\n\n\nPlotting Multiple Calendar Heatmaps\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "HandsonExercise/Hands-on_Ex06-VisTime.html#cycle-plot",
    "href": "HandsonExercise/Hands-on_Ex06-VisTime.html#cycle-plot",
    "title": "Hands-on Exercise 6: Visualising and Analysing Time-oriented Data",
    "section": "Cycle Plot",
    "text": "Cycle Plot\nIn this section, you will learn how to plot a cycle plot showing the time-series patterns and trend of visitor arrivals from Vietnam programmatically by using ggplot2 functions.\n\n\nData Preparation\n\nStep 1: Data Import\nFor the purpose of this hands-on exercise, arrivals_by_air.xlsx will be used.\nThe code chunk below imports arrivals_by_air.xlsx by using read_excel() of readxl package and save it as a tibble data frame called air.\n\nair <- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\n\nStep 2: Deriving month and year fields\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month <- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year <- year(ymd(air$`Month-Year`))\n\n\n\nStep 4: Extracting the target country\nNext, the code chunk below is use to extract data for the target country (i.e. Vietnam)\n\nVietnam <- air %>% \n  select(`Vietnam`, \n         month, \n         year) %>%\n  filter(year >= 2010)\n\n\n\nStep 5: Computing year average arrivals by month\nThe code chunk below uses group_by() and summarise() of dplyr to compute year average arrivals by month.\n\nhline.data <- Vietnam %>% \n  group_by(month) %>%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\n\nPlotting the cycle plot\nThe code chunk below is used to plot the cycle plot as shown in Slide 12/23.\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\")"
  },
  {
    "objectID": "InClassExercise/inclass03/inclass_ex03.html",
    "href": "InClassExercise/inclass03/inclass_ex03.html",
    "title": "In Class Exercise 3",
    "section": "",
    "text": "Installing and loading R packages\nTwo packages will be installed and loaded. They are tidyverse and ggiraph\n\npacman::p_load(tidyverse)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nGetting Started  Installing and loading R packages  Two packages will be install and loaded, they are: tidyverse, ggiraph. \nAlways to load tidyverse last, to avoid any potential conflicts with tidyverse.\n\npacman::p_load(ggiraph, tidyverse)\n\n\nexam_data <- read_csv('data/Exam_data.csv', show_col_types = FALSE)\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) + geom_dotplot(dotsize = 0.5)\n\n\n\n\n\np <- ggplot(data = exam_data,\n            aes(x = MATHS)) + geom_dotplot_interactive(aes(tooltip = ID),\n                                                       stackgroups = TRUE,\n                                                       binwidth = 2,\n                                                       method = \"histodot\") + scale_y_continuous(NULL, breaks = NULL)\n\ngirafe(ggobj = p, width_svg = 10,height_svg =  10* 0.5)"
  },
  {
    "objectID": "InClassExercise/inclass06/inclass06.html",
    "href": "InClassExercise/inclass06/inclass06.html",
    "title": "In Class Exercise 06",
    "section": "",
    "text": "Slopegraph\nhttps://public.tableau.com/app/profile/thomas.hoang8154/viz/rice_16767029061110/Sheet1\nIn order to do this on R, u need to install CGPfunction package, and an extension newggslopegraph.\nU should go and read about this package.\nBubble Plot and Animation\nhttps://public.tableau.com/app/profile/thomas.hoang8154/viz/bubbleplotpopulation/AnimatedBubblePlot\nCycle Plot\nhttps://public.tableau.com/app/profile/thomas.hoang8154/viz/InClassExercise06/Dashboard1\nSee more guides about ggplot packages for R under this site.\nhttp://exts.ggplot2.tidyverse.org/gallery\nTo draw overlapping of area graph\nhttps://nsgrantham.github.io/ggbraid/"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html",
    "href": "TakehomeEx/TakehomeEx04.html",
    "title": "Take Home Exercise 04",
    "section": "",
    "text": "In this take-home exercise, we need to uncover the impact of COVID-19 as well as the global economic and political dynamic in 2022 on Singapore bi-lateral trade (i.e. Import, Export and Trade Balance) by using appropriate analytical visualisation techniques learned in Lesson 6: It’s About Time.\nBackground information is that Singapore is a small country with no natural resources. However on the other hands, as robust trade hub and a strong economy, Singapore maintains a relatively stable and strong currency SGD, which gives her a strong advantage for Singapore import as strong Singapore SGD can be used to purchase more goods and services from other countries.\nThroughout 2020, 2021 and 2022, Singapore (and the world) just exited the severe climates of Covid pandemics, lockdown lead to disruption of manufacturing, and physical trades, which affect the supply of many commodities / consumer goods. It is a popular belief that as 2022 rolled around, Singapore will be able to leverage on its strong SGD to improve its trade balance.\nLet’s examine the data and dive deeper into Singapore trade volumes."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#import-versus-export",
    "href": "TakehomeEx/TakehomeEx04.html#import-versus-export",
    "title": "Take Home Exercise 04",
    "section": "IMPORT VERSUS EXPORT",
    "text": "IMPORT VERSUS EXPORT\nWe want to do a comparison between Singapore Import and Export, first let’s import the data.\n\nmonthlyexport_overall <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/outputFile.xlsx\", sheet = \"T1\")\n\nmonthlyimport_overall <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/outputFile.xlsx\", sheet = \"T8\")\n\nSheet T1 = Merchandise Exports By Commodity Division, Monthly snippet\n\nSheet T2 = Merchandise Imports By Commodity Division, Monthly snippet\n\nAs you can see from above 2 snippets of the data table, most of the sub categories are similar between export and import data. However the highlight rows are the difference between the 2 sets of data. We should remove them before we can start any comparisons.\n\nmonthlyexport_overall <- monthlyexport_overall[!grepl(\"Oil Bunkers\", monthlyexport_overall$`Data Series`),]\n\n\nmonthlyimport_overall <- monthlyimport_overall[!grepl(\"Meat & Meat Preparations\", monthlyimport_overall$`Data Series`),]\nmonthlyimport_overall <- monthlyimport_overall[!grepl(\"Footwear\", monthlyimport_overall$`Data Series`),]\n\nNow both tables would have the same sub categories of merchandises for comparison.\nNow. we can extract the total Export Merchandise Import and Export and we can combine them into a separate dataframe\n\nmonthlyexport_total <- monthlyexport_overall[grepl(\"Total Merchandise Exports\", monthlyexport_overall$`Data Series`),]\n\n\nmonthlyimport_total <- monthlyimport_overall[grepl(\"Total Merchandise Imports\", monthlyimport_overall$`Data Series`),]\n\n\nmonthly_tradebalance1 = rbind(monthlyexport_total , monthlyimport_total)\n\nmonthly_tradebalance1= as.data.frame(t(monthly_tradebalance1)) \ncolnames(monthly_tradebalance1) <- monthly_tradebalance1[1,]\nmonthly_tradebalance1 <- monthly_tradebalance1[-1,]\n\nhead(monthly_tradebalance1)\n\n         Total Merchandise Exports Total Merchandise Imports\n2022 Dec                  55000084                  49869770\n2022 Nov                  54162780                  50653907\n2022 Oct                  56576348                  53182943\n2022 Sep                  62507132                  55799312\n2022 Aug                  63363749                  58466009\n2022 Jul                  64124991                  61029374\n\n\n\nmonthly_tradebalance <- monthly_tradebalance1 %>% \n  rownames_to_column(var = \"Month-Year\")\n\n\ntail(monthly_tradebalance)\n\n   Month-Year Total Merchandise Exports Total Merchandise Imports\n31   2020 Jun                  40640766                  35120892\n32   2020 May                  36482259                  31458238\n33   2020 Apr                  39946596                  35878828\n34   2020 Mar                  45800019                  40433029\n35   2020 Feb                  43512320                  39472637\n36   2020 Jan                  44501656                  41180224\n\n\nReverse sort the data frame “monthly_tradebalance”\n\nmonthly_tradebalance <- monthly_tradebalance[nrow(monthly_tradebalance):1, ]\nrownames(monthly_tradebalance) <- rownames(monthly_tradebalance[nrow(monthly_tradebalance):1, ])\n\nhead(monthly_tradebalance)\n\n  Month-Year Total Merchandise Exports Total Merchandise Imports\n1   2020 Jan                  44501656                  41180224\n2   2020 Feb                  43512320                  39472637\n3   2020 Mar                  45800019                  40433029\n4   2020 Apr                  39946596                  35878828\n5   2020 May                  36482259                  31458238\n6   2020 Jun                  40640766                  35120892\n\n\n\nmonthly_tradebalance$`Month-Year` <- as.Date(paste0(monthly_tradebalance$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\n\n\nmonthly_tradebalance\n\n   Month-Year Total Merchandise Exports Total Merchandise Imports\n1  2020-01-01                  44501656                  41180224\n2  2020-02-01                  43512320                  39472637\n3  2020-03-01                  45800019                  40433029\n4  2020-04-01                  39946596                  35878828\n5  2020-05-01                  36482259                  31458238\n6  2020-06-01                  40640766                  35120892\n7  2020-07-01                  42892684                  37843646\n8  2020-08-01                  44333640                  36472279\n9  2020-09-01                  43907435                  38801413\n10 2020-10-01                  44088350                  38173829\n11 2020-11-01                  43291938                  38477878\n12 2020-12-01                  46246876                  40154550\n13 2021-01-01                  44988833                  39028616\n14 2021-02-01                  42602227                  37643664\n15 2021-03-01                  55444082                  47668437\n16 2021-04-01                  50591895                  45169547\n17 2021-05-01                  47355225                  41559697\n18 2021-06-01                  49618994                  45039845\n19 2021-07-01                  49834010                  46107788\n20 2021-08-01                  52038522                  44714491\n21 2021-09-01                  52034038                  45980374\n22 2021-10-01                  53639342                  47945213\n23 2021-11-01                  56720130                  50674908\n24 2021-12-01                  59213794                  54349357\n25 2022-01-01                  54845697                  50026788\n26 2022-02-01                  51991457                  44958373\n27 2022-03-01                  63132579                  58079982\n28 2022-04-01                  60237343                  56116002\n29 2022-05-01                  59847424                  57604263\n30 2022-06-01                  64177050                  59649162\n31 2022-07-01                  64124991                  61029374\n32 2022-08-01                  63363749                  58466009\n33 2022-09-01                  62507132                  55799312\n34 2022-10-01                  56576348                  53182943\n35 2022-11-01                  54162780                  50653907\n36 2022-12-01                  55000084                  49869770\n\n\n\nmonthly_tradebalance$`Total Merchandise Exports` <- as.numeric(monthly_tradebalance$`Total Merchandise Exports`)\nmonthly_tradebalance$`Total Merchandise Imports` <- as.numeric(monthly_tradebalance$`Total Merchandise Imports`)\n\n\nmonthly_tradebalanceMelt <- reshape2::melt(monthly_tradebalance, id.var='Month-Year')\n\n\np1 = ggplot(monthly_tradebalanceMelt, aes(x=monthly_tradebalanceMelt$`Month-Year` , y=value, col=variable, group = 1)) +\n  geom_point() + geom_line(aes(group=factor(variable))) +\n  xlab(\"Year\") + ylab(\"Trade Volume in Billions\")\n\np1\n\n\n\n\nAs evidenced by the above chart, Singapore import and export move quite in tandem with each other. Between 2020-2023, it shows an uptrend. As Export volume increase, so does Import. However Singapore overall Export are more than its Import, consistently since post-covid 2020, Singapore remains with trade surplus overall.\nWhile trade surplus are confirmed, we should examine how Singapore trade surplus is trending post-covid, let’s create a data table of the difference between Export and Import ( the trade surplus)\n\nmonthly_tradebalance$Trade_surplus = monthly_tradebalance$`Total Merchandise Exports` - monthly_tradebalance$`Total Merchandise Imports`\n\n\nmonthly_tradebalance\n\n   Month-Year Total Merchandise Exports Total Merchandise Imports Trade_surplus\n1  2020-01-01                  44501656                  41180224       3321432\n2  2020-02-01                  43512320                  39472637       4039683\n3  2020-03-01                  45800019                  40433029       5366990\n4  2020-04-01                  39946596                  35878828       4067768\n5  2020-05-01                  36482259                  31458238       5024021\n6  2020-06-01                  40640766                  35120892       5519874\n7  2020-07-01                  42892684                  37843646       5049038\n8  2020-08-01                  44333640                  36472279       7861361\n9  2020-09-01                  43907435                  38801413       5106022\n10 2020-10-01                  44088350                  38173829       5914521\n11 2020-11-01                  43291938                  38477878       4814060\n12 2020-12-01                  46246876                  40154550       6092326\n13 2021-01-01                  44988833                  39028616       5960217\n14 2021-02-01                  42602227                  37643664       4958563\n15 2021-03-01                  55444082                  47668437       7775645\n16 2021-04-01                  50591895                  45169547       5422348\n17 2021-05-01                  47355225                  41559697       5795528\n18 2021-06-01                  49618994                  45039845       4579149\n19 2021-07-01                  49834010                  46107788       3726222\n20 2021-08-01                  52038522                  44714491       7324031\n21 2021-09-01                  52034038                  45980374       6053664\n22 2021-10-01                  53639342                  47945213       5694129\n23 2021-11-01                  56720130                  50674908       6045222\n24 2021-12-01                  59213794                  54349357       4864437\n25 2022-01-01                  54845697                  50026788       4818909\n26 2022-02-01                  51991457                  44958373       7033084\n27 2022-03-01                  63132579                  58079982       5052597\n28 2022-04-01                  60237343                  56116002       4121341\n29 2022-05-01                  59847424                  57604263       2243161\n30 2022-06-01                  64177050                  59649162       4527888\n31 2022-07-01                  64124991                  61029374       3095617\n32 2022-08-01                  63363749                  58466009       4897740\n33 2022-09-01                  62507132                  55799312       6707820\n34 2022-10-01                  56576348                  53182943       3393405\n35 2022-11-01                  54162780                  50653907       3508873\n36 2022-12-01                  55000084                  49869770       5130314\n\n\n\np2<- ggplot(monthly_tradebalance, aes(x=monthly_tradebalance$`Month-Year` , y= monthly_tradebalance$Trade_surplus, group = 1)) +\n  geom_point() + geom_line() + geom_smooth()+\n  xlab(\"Year\") + ylab(\"Trade Volume in Billions\")\n\np2\n\n\n\n\nIf we only look at the figure p1 above, one may say that Singapore trade data displayed a healthy uptrend both covid until recent 2022. However. once we examine the trade balance/surplus, Singapore trade surplus was only fluctuating between 3.5 billions and 8.5 billions on monthly basis and it is not on the steady uptrend at all.\nEven at beginning of 2022, it even dropped to nearly 2.5 billions for April 2022 and that is the lowest level in 2 years period. If we look at the geom_smooth graph, we can see that the trade surplus of Singapore is actually on the downtrend since second half of 2020.\nThis contracts the general consensus that post-covid, with resume of physical trades, Singapore trade surplus should be picking up. However, the data here suggests that as the world resumes normality, Singapore trade surplus is on the downtrend instead."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#inflation-vs-real-growth",
    "href": "TakehomeEx/TakehomeEx04.html#inflation-vs-real-growth",
    "title": "Take Home Exercise 04",
    "section": "INFLATION VS REAL GROWTH",
    "text": "INFLATION VS REAL GROWTH"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#domestic-export-vs-re-export",
    "href": "TakehomeEx/TakehomeEx04.html#domestic-export-vs-re-export",
    "title": "Take Home Exercise 04",
    "section": "DOMESTIC EXPORT VS RE-EXPORT",
    "text": "DOMESTIC EXPORT VS RE-EXPORT"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#by-countries-and-by-segment",
    "href": "TakehomeEx/TakehomeEx04.html#by-countries-and-by-segment",
    "title": "Take Home Exercise 04",
    "section": "By Countries and By Segment?",
    "text": "By Countries and By Segment?"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#i-import-versus-export",
    "href": "TakehomeEx/TakehomeEx04.html#i-import-versus-export",
    "title": "Take Home Exercise 04",
    "section": "I) IMPORT VERSUS EXPORT",
    "text": "I) IMPORT VERSUS EXPORT\nWe want to do a comparison between Singapore Import and Export, first let’s import the data.\n\nmonthlyexport_overall <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/outputFile.xlsx\", sheet = \"T1\")\n\nmonthlyimport_overall <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/outputFile.xlsx\", sheet = \"T8\")\n\nPlease note all these figures are in Singapore dollar currency.\nSheet T1 = Merchandise Exports By Commodity Division, Monthly snippet\n\nSheet T2 = Merchandise Imports By Commodity Division, Monthly snippet\n\nAs you can see from above 2 snippets of the data table, most of the sub categories are similar between export and import data. However the highlight rows are some of the differences between the 2 sets of data. We should remove them before we can start any comparisons.\n\nmonthlyexport_overall <- monthlyexport_overall[!grepl(\"Oil Bunkers\", monthlyexport_overall$`Data Series`),]\n\n\nmonthlyimport_overall <- monthlyimport_overall[!grepl(\"Meat & Meat Preparations\", monthlyimport_overall$`Data Series`),]\nmonthlyimport_overall <- monthlyimport_overall[!grepl(\"Footwear\", monthlyimport_overall$`Data Series`),]\n\nNow both tables would have the same sub categories of merchandises for comparison.\nNow. we can extract the total Export Merchandise Import and Export and we can combine them into a separate dataframe\n\nmonthlyexport_total <- monthlyexport_overall[grepl(\"Total Merchandise Exports\", monthlyexport_overall$`Data Series`),]\n\n\nmonthlyimport_total <- monthlyimport_overall[grepl(\"Total Merchandise Imports\", monthlyimport_overall$`Data Series`),]\n\n\nmonthly_tradebalance1 = rbind(monthlyexport_total , monthlyimport_total)\n\nmonthly_tradebalance1= as.data.frame(t(monthly_tradebalance1)) \ncolnames(monthly_tradebalance1) <- monthly_tradebalance1[1,]\nmonthly_tradebalance1 <- monthly_tradebalance1[-1,]\n\nhead(monthly_tradebalance1)\n\n         Total Merchandise Exports Total Merchandise Imports\n2022 Dec                  55000084                  49869770\n2022 Nov                  54162780                  50653907\n2022 Oct                  56576348                  53182943\n2022 Sep                  62507132                  55799312\n2022 Aug                  63363749                  58466009\n2022 Jul                  64124991                  61029374\n\n\n\nmonthly_tradebalance <- monthly_tradebalance1 %>% \n  rownames_to_column(var = \"Month-Year\")\n\nReverse sort the data frame “monthly_tradebalance”\n\nmonthly_tradebalance <- monthly_tradebalance[nrow(monthly_tradebalance):1, ]\nrownames(monthly_tradebalance) <- rownames(monthly_tradebalance[nrow(monthly_tradebalance):1, ])\n\nhead(monthly_tradebalance)\n\n  Month-Year Total Merchandise Exports Total Merchandise Imports\n1   2020 Jan                  44501656                  41180224\n2   2020 Feb                  43512320                  39472637\n3   2020 Mar                  45800019                  40433029\n4   2020 Apr                  39946596                  35878828\n5   2020 May                  36482259                  31458238\n6   2020 Jun                  40640766                  35120892\n\n\nConvert Month-Year into time format (continuous time series)\n\nmonthly_tradebalance$`Month-Year` <- as.Date(paste0(monthly_tradebalance$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\n\nConvert trade volumes numbers from string to numeric values.\n\nmonthly_tradebalance$`Total Merchandise Exports` <- as.numeric(monthly_tradebalance$`Total Merchandise Exports`)\nmonthly_tradebalance$`Total Merchandise Imports` <- as.numeric(monthly_tradebalance$`Total Merchandise Imports`)\n\n\nmonthly_tradebalanceMelt <- reshape2::melt(monthly_tradebalance, id.var='Month-Year')\n\n\np1 = ggplot(monthly_tradebalanceMelt, aes(x=monthly_tradebalanceMelt$`Month-Year` , y=value, col=variable, group = 1)) +\n  geom_point() + geom_line(aes(group=factor(variable))) +\n  xlab(\"Year\") + ylab(\"Trade Volume in Billions\")\n\np1\n\n\n\n\nAs evidenced by the above chart, Singapore import and export move quite in tandem with each other. Between 2020-2023, it shows an uptrend. As Export volume increase, so does Import. However Singapore overall Export are more than its Import, consistently since post-covid 2020, Singapore is sill a country with a positive trade surplus overall.\nWhile positive trade surplus are confirmed, we should examine how Singapore trade surplus is trending post-covid, let’s create a data table of the difference between Export and Import ( the trade surplus)\n\nmonthly_tradebalance$Trade_surplus = monthly_tradebalance$`Total Merchandise Exports` - monthly_tradebalance$`Total Merchandise Imports`\n\n\np2<- ggplot(monthly_tradebalance, aes(x=monthly_tradebalance$`Month-Year` , y= monthly_tradebalance$Trade_surplus, group = 1)) +\n  geom_point() + geom_line() + geom_smooth()+\n  xlab(\"Year\") + ylab(\"Trade Surplus in Billions\")\n\np2\n\n\n\n\nIf we only look at the figure p1 above, one may say that Singapore trade data displayed a healthy uptrend both covid until recent 2022. However. once we examine the trade balance/surplus, Singapore trade surplus was only fluctuating between 3.5 billions and 8.5 billions on monthly basis and it is not on the steady uptrend at all.\nEven at beginning of 2022, it even dropped to nearly 2.6 billions for Mar 2022 and that is the lowest level in 2 years period. If we look at the geom_smooth graph, we can see that the trade surplus of Singapore is actually on the downtrend since second half of 2020.\nThis contracts the general consensus that post-covid, with resume of commodities trades around the world, Singapore Trade surplus should be picking up. However, the data here suggests that as the world resumes normality, Singapore trade surplus is on the downtrend instead.\n\nIMPORT VERSUS EXPORT - Monthly Cycle Plot\nNext, based on the Trade Surplus above, we can create Monthly Cycle plot to compare the all the January between 2020 versus Jan in 2021, 2022 and 2023.\nFirst, slice the the monthly_tradebalance into new data table with only 2 columns “Month-Year” and “Trade Surplus”\n\nmonthly_tradebalance_test = monthly_tradebalance[, c(\"Month-Year\", \"Trade_surplus\")]\nhead(monthly_tradebalance_test)\n\n  Month-Year Trade_surplus\n1 2020-01-01       3321432\n2 2020-02-01       4039683\n3 2020-03-01       5366990\n4 2020-04-01       4067768\n5 2020-05-01       5024021\n6 2020-06-01       5519874\n\n\nCreate 2 new columns in that data table, month and year from the Month-Year column\n\nmonthly_tradebalance_test <- monthly_tradebalance_test %>%\n  mutate(year = year(monthly_tradebalance_test$`Month-Year`), \n         month = factor(month(monthly_tradebalance_test$`Month-Year`), levels = 1:12, \n                        labels = month.name))\n\nWe create horizontal lines with the Month that marked the average value of the trade surplus data.\n\nmonthly_tradebalance_test\n\n   Month-Year Trade_surplus year     month\n1  2020-01-01       3321432 2020   January\n2  2020-02-01       4039683 2020  February\n3  2020-03-01       5366990 2020     March\n4  2020-04-01       4067768 2020     April\n5  2020-05-01       5024021 2020       May\n6  2020-06-01       5519874 2020      June\n7  2020-07-01       5049038 2020      July\n8  2020-08-01       7861361 2020    August\n9  2020-09-01       5106022 2020 September\n10 2020-10-01       5914521 2020   October\n11 2020-11-01       4814060 2020  November\n12 2020-12-01       6092326 2020  December\n13 2021-01-01       5960217 2021   January\n14 2021-02-01       4958563 2021  February\n15 2021-03-01       7775645 2021     March\n16 2021-04-01       5422348 2021     April\n17 2021-05-01       5795528 2021       May\n18 2021-06-01       4579149 2021      June\n19 2021-07-01       3726222 2021      July\n20 2021-08-01       7324031 2021    August\n21 2021-09-01       6053664 2021 September\n22 2021-10-01       5694129 2021   October\n23 2021-11-01       6045222 2021  November\n24 2021-12-01       4864437 2021  December\n25 2022-01-01       4818909 2022   January\n26 2022-02-01       7033084 2022  February\n27 2022-03-01       5052597 2022     March\n28 2022-04-01       4121341 2022     April\n29 2022-05-01       2243161 2022       May\n30 2022-06-01       4527888 2022      June\n31 2022-07-01       3095617 2022      July\n32 2022-08-01       4897740 2022    August\n33 2022-09-01       6707820 2022 September\n34 2022-10-01       3393405 2022   October\n35 2022-11-01       3508873 2022  November\n36 2022-12-01       5130314 2022  December\n\navgvalue <- mean(monthly_tradebalance_test$Trade_surplus)\nhline.data <- data.frame(avgvalue = avgvalue)\n\n\nggplot(monthly_tradebalance_test, aes(x=year, y=Trade_surplus, group=month)) + \n  geom_line(colour=\"blue\") +\n  geom_hline(aes(yintercept=avgvalue), data=hline.data, colour=\"blue\", size=2) + \n  facet_grid(~month) +\n  xlab(\"Month of the Year\") +\n  ylab(\"Trade Surplus in Billions\") +\n  ggtitle(\"Singapore Trade Surplus Monthly Cycle Plot 2020 to 2023\")+\n  scale_x_discrete(labels = function(x) substr(x, 3, 4))\n\n\n\n\nFrom above analysis, we can see that months with the highest trade surplus are March and August, where most of the trade surplus is above the monthly average of 5.1 billions. While April and July numbers were almost always below the average trade surplus.\nAnother observation is that almost across all the 12 months, the months of 2022 almost always is lower than the months of 2021 (except February) . In other words, Singapore trade surplus for 2022 are lower YoY basis, compared to 2021.\nContrary to prediction that Singapore trade balance will improve as Covid lockdowns around the world are lifted, as turbulent 2022 with record inflation and large scale war, Singapore trade surplus is actually not as good as previous 2021."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#iii-by-region",
    "href": "TakehomeEx/TakehomeEx04.html#iii-by-region",
    "title": "Take Home Exercise 04",
    "section": "III) By Region",
    "text": "III) By Region\n\nmthlyimport <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/monthly data by countries.xlsx\", sheet = \"T1\")\n\nmthlyexport <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/monthly data by countries.xlsx\", sheet = \"T2\")\n\nLet’s create a sub dataset for regions only, which consist of 6 areas, import and export\n1) America\n2) Asia\n3) Europe\n4) Oceania\n5) Africa\n\nImport Data\n\nregions_mthlyimport = mthlyimport[1:6,]\n\n\nregions_mthlyexport = mthlyexport[1:6,]\n\nCombine 2 dataframes and transpose the data\n\nregions_mthlytrade1 = rbind(regions_mthlyimport , regions_mthlyexport)\nregions_mthlytrade= as.data.frame(t(regions_mthlytrade1)) \ncolnames(regions_mthlytrade) <- regions_mthlytrade[1,]\nregions_mthlytrade <- regions_mthlytrade[-1,]\n\n\nregions_mthlytrade <- regions_mthlytrade %>% \n  rownames_to_column(var = \"Month-Year\")\n\nReverse sort and convert the format of Month-Year to time and trade numbers into numeric format.\n\nregions_mthlytrade <- regions_mthlytrade[nrow(regions_mthlytrade):1, ]\nrownames(regions_mthlytrade) <- rownames(regions_mthlytrade[nrow(regions_mthlytrade):1, ])\n\n\nregions_mthlytrade$`Month-Year` <- as.Date(paste0(regions_mthlytrade$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\n\n\nnames(regions_mthlytrade)[2:7] <- c(\"Total Import\", \"America Import\" , \"Asia Import\" , \"Europe Import\" , \"Oceania Import\", \"Africa Import\")\n\n\nnames(regions_mthlytrade)[8:13] <- c(\"Total Export\", \"America Export\" , \"Asia Export\" , \"Europe Export\" , \"Oceania Export\", \"Africa Export\")\n\n\nhead(regions_mthlytrade)\n\n  Month-Year Total Import America Import Asia Import Europe Import\n1 2020-01-01   41180224.0         5844.1     27128.1        6859.7\n2 2020-02-01   39472637.0         5314.1     26588.1        6209.6\n3 2020-03-01   40433029.0         5910.8     26783.6        6333.3\n4 2020-04-01   35878828.0         5183.5     24534.5        5150.6\n5 2020-05-01   31458238.0         4259.0     21718.9        4629.0\n6 2020-06-01   35120892.0         4686.2     24779.3        4960.7\n  Oceania Import Africa Import Total Export America Export Asia Export\n1          819.7         528.6   44501656.0         5557.8     31668.0\n2          694.7         666.1   43512320.0         5870.7     29713.9\n3          845.9         559.4   45800019.0         6021.1     32534.9\n4          637.6         372.6   39946596.0         6569.1     26245.7\n5          441.8         409.6   36482259.0         5922.2     24437.8\n6          456.4         238.2   40640766.0         4895.5     28994.5\n  Europe Export Oceania Export Africa Export\n1        4432.5         2121.6         721.8\n2        4996.4         2090.4         841.0\n3        4468.2         1859.3         916.5\n4        5051.3         1511.8         568.8\n5        4398.0         1311.4         412.8\n6        4880.4         1418.3         452.1\n\n\nCreate dataframe for each region\n\namerica_data = regions_mthlytrade[, grepl(\"America\", names(regions_mthlytrade))]\nasia_data = regions_mthlytrade[, grepl(\"Asia\", names(regions_mthlytrade))]\neurope_data = regions_mthlytrade[, grepl(\"Europe\", names(regions_mthlytrade))]\noceania_data = regions_mthlytrade[, grepl(\"Oceania\", names(regions_mthlytrade))]\nafrica_data = regions_mthlytrade[, grepl(\"Africa\", names(regions_mthlytrade))]\ntotalregion_data = regions_mthlytrade[, grepl(\"Total\", names(regions_mthlytrade))]\n\n\namerica_data <- as.data.frame(lapply(america_data, function(x) as.numeric(as.character(x))))\nasia_data <- as.data.frame(lapply(asia_data, function(x) as.numeric(as.character(x))))\neurope_data <- as.data.frame(lapply(europe_data, function(x) as.numeric(as.character(x))))\noceania_data <- as.data.frame(lapply(oceania_data, function(x) as.numeric(as.character(x))))\nafrica_data <- as.data.frame(lapply(africa_data, function(x) as.numeric(as.character(x))))\ntotalregion_data <- as.data.frame(lapply(totalregion_data, function(x) as.numeric(as.character(x))))\n\n\namerica_data$Month_Year <- regions_mthlytrade$`Month-Year`\nasia_data$Month_Year <- regions_mthlytrade$`Month-Year`\neurope_data$Month_Year <- regions_mthlytrade$`Month-Year`\noceania_data$Month_Year <- regions_mthlytrade$`Month-Year`\nafrica_data$Month_Year <- regions_mthlytrade$`Month-Year`\ntotalregion_data$Month_Year <- regions_mthlytrade$`Month-Year`\n\n\n\nAMERICA TRADE Volume\n\namerica_data <- america_data %>%\n  mutate(fill = ifelse(America.Import > America.Export, \"deficit\", \"surplus\"))\n\namericaplot = ggplot(america_data) +\n  geom_line(aes(x = Month_Year, y = America.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = America.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_ribbon(aes(x = Month_Year, ymin = America.Import, ymax = America.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"America Trade volume\", title = \"Americas Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\namericaplot\n\n\n\n\nAs you can see, the blue line represents the monthly Import number from America from Jan 2020 to Jan 2023. While dark red line represents the monthly Export number from America in the same period. With geom_ribbon color the difference area between the two lines in grey color, we can see the difference between the 2 lines clearly.\nThroughout the time period, the Export figure was always above the blue line, which indicates Singapore was maintaining a trade surplus with Americas. However, as the grey area was getting smaller, proving Singapore trade surplus with America is getting smaller. And in 2021, the blue Import line started to cross above red Export line, this indicates Singapore import from America had exceeded export volume and Singapore started to enter into trade deficits versus Americas region.\nThis trade deficit has continued and even grew bigger in 2022, as evidenced by the bigger brown area between the 2 lines. This concludes that after Covid, Singapore from trade surplus position, has turned into deficit versus Americas regions\n\n\nASIA TRADE VOLUME\n\nasia_data <- asia_data %>%\n  mutate(fill = ifelse(Asia.Import > Asia.Export, \"deficit\", \"surplus\"))\n\nasiaplot = ggplot(asia_data) +\n  geom_line(aes(x = Month_Year, y = Asia.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Asia.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_ribbon(aes(x = Month_Year, ymin = Asia.Import, ymax = Asia.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Asia Trade volume\", title = \"Asia Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\n\nasiaplot\n\n\n\n\n\n\nEUROPE TRADE VOLUME\n\neurope_data <- europe_data %>%\n  mutate(fill = ifelse(Europe.Import > Europe.Export, \"deficit\", \"surplus\"))\n\neuropeplot = ggplot(europe_data) +\n  geom_line(aes(x = Month_Year, y = Europe.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Europe.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_ribbon(aes(x = Month_Year, ymin = Europe.Import, ymax = Europe.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Europe Trade volume\", title = \"Europe Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\n\neuropeplot\n\n\n\n\n\n\nOCEANIA TRADE VOLUME\n\noceania_data <- oceania_data %>%\n  mutate(fill = ifelse(Oceania.Import > Oceania.Export, \"deficit\", \"surplus\"))\n\noceaniaplot = ggplot(oceania_data) +\n  geom_line(aes(x = Month_Year, y = Oceania.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Oceania.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_ribbon(aes(x = Month_Year, ymin = Oceania.Import, ymax = Oceania.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Oceania Trade volume\", title = \"Oceania Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\noceaniaplot\n\n\n\n\n\n\nAFRICA TRADE VOLUME\n\nafrica_data <- africa_data %>%\n  mutate(fill = ifelse(Africa.Import > Africa.Export, \"deficit\", \"surplus\"))\n\nafricaplot = ggplot(africa_data) +\n  geom_line(aes(x = Month_Year, y = Africa.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Africa.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_ribbon(aes(x = Month_Year, ymin = Africa.Import, ymax = Africa.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Africa Trade volume\", title = \"Africa Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\nafricaplot\n\n\n\n\n\n\nOVERALL TRADE VOLUME\n\ntotalregion_data <- totalregion_data %>%\n  mutate(fill = ifelse(Total.Import > Total.Export, \"deficit\", \"surplus\"))\n\noverallplot = ggplot(totalregion_data) +\n  geom_line(aes(x = Month_Year, y = Total.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Total.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_ribbon(aes(x = Month_Year, ymin = Total.Import, ymax = Total.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Overall Trade volume\", title = \"Overall Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\noverallplot\n\n\n\n\n\n\nDashboard for Regions Data\n\n(americaplot + asiaplot + europeplot) / (oceaniaplot + africaplot + overallplot)\n\n\n\n\nIn this dashboard, we can compare Singapore monthly trade blances (surplus / deficits) versus 5 main regions of world geography. In term of volume, Asia trade balance is the highest, with both import and export numbers reaching to the height of more than 40 billions per month, while Oceania trade number is the lowest reaching no more than 4 billions SGD monthly. The grey area represents the periods where Singapore is enjoying trade surplus against its trading partners, while the brown area is where Singapore dipped into trade deficit monthly.\nIn term of trend, Americas portrayed a reverse between 2020 to 2022, where during Covid lockdown, Singapore was holding trade surplus with Americas, but once lockdown was lifted, Singapore has turned into trade deficit versus Americas.\nIn Oceania, and Africa, Singapore has been maintaining positive trade surplus, regardless of the covid lockdown. The noticeable difference is the grey area (represents the trade surplus if the red line is above the blue line) is getting bigger in 2022, compared to previous years\nIn Europe, Singapore has always been having trade deficit (blue line is above the red line), and the deficit (brown area) seems to get bigger from 2020 to 2022, too as the covid lockdown started to lift. One would expect that due to Russian invasion, which disrupted the transportation and production of goods and services in Europe, Singapore as an import partner, would have its import decrease and smaller trade deficit. But apparently, the trade deficit gets even larger as per this evidence.\nOverall plot, we can see that it mimics the trend of 2 biggest trading regional partners with Singapore, Asia and Americas, where the export and import volumes were trending up until mid year 2022, and they both started to trend downward. This can be the impact of Russian invasion on Ukraine, combined with huge inflation and tightening of money supplies by most superpowers around the world, lead to the dampening of trade volume.\n\n\nWhat about other countries?\nUsing the above code chunks, we can examine other countries, which are major trading partners with Singapore. Let’s check out some of them.\n\nChina\n\n\nImport Data\n\nchina_mthlyimport = mthlyimport[grep(\"China\", mthlyimport$`Data Series`, ignore.case = TRUE), ]\n\n\nchina_mthlyexport = mthlyexport[grep(\"China\", mthlyexport$`Data Series`, ignore.case = TRUE), ]\n\nCombine 2 dataframes and transpose the data\n\nchina_mthlytrade1 = rbind(china_mthlyimport , china_mthlyexport)\nchina_mthlytrade= as.data.frame(t(china_mthlytrade1)) \ncolnames(china_mthlytrade) <- china_mthlytrade[1,]\nchina_mthlytrade <- china_mthlytrade[-1,]\n\n\nchina_mthlytrade <- china_mthlytrade %>% \n  rownames_to_column(var = \"Month-Year\")\n\nReverse sort and convert the format of Month-Year to time and trade numbers into numeric format.\n\nchina_mthlytrade <- china_mthlytrade[nrow(china_mthlytrade):1, ]\nrownames(china_mthlytrade) <- rownames(china_mthlytrade[nrow(china_mthlytrade):1, ])\n\n\nchina_mthlytrade$`Month-Year` <- as.Date(paste0(china_mthlytrade$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\nnames(china_mthlytrade)[2:3] <- c(\"China Import\", \"China Export\")\n\n\nchina_mthlytrade$`China Import` = as.numeric(china_mthlytrade$`China Import`)\nchina_mthlytrade$`China Export` = as.numeric(china_mthlytrade$`China Export`)\n\nNow we can plot our data\n\nchina_mthlytrade <- china_mthlytrade %>%\n  mutate(fill = ifelse( china_mthlytrade$`China Import`> china_mthlytrade$`China Export`, \"deficit\", \"surplus\"))\n\nchinaplot = ggplot(china_mthlytrade) +\n  geom_line(aes(x = china_mthlytrade$`Month-Year`, y = china_mthlytrade$`China Import`), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = china_mthlytrade$`Month-Year`, y = china_mthlytrade$`China Export`), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_ribbon(aes(x = china_mthlytrade$`Month-Year`, ymin = china_mthlytrade$`China Export`, ymax = china_mthlytrade$`China Import`, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"China Trade volume\", title = \"China Monthly Trade Balance\" ) +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\nchinaplot\n\n\n\n\nAs you can see from the above charts, both Singapore import and export volumes with China have increased from 2020 to 2023. The numbers have more than doubled from 4 billions to 9 billions. The dark red line represented the Export, while blue line represents the monthly import. At beginning of 2020, the brown area by geom_ribbon suggested that Singapore has trade deficit with China. However from April 2020 all to April 2022, we can see that the red line always stayed above the blue line, which suggest Singapore is maintaing the trade surplus ( which is represented by the grey area). Understandably, China pursued the zero Covid policy which severely affected their manufacturing capabilities and thus Singapore cannot import from China as much.\nAs the Russian invasion happened mid-2022 and covid lockdown lifted by Singapore, the trade balance has turned deficit again, by sharp decrease of Singapore export to China."
  },
  {
    "objectID": "InClassExercise/inclass07/inclass07.html",
    "href": "InClassExercise/inclass07/inclass07.html",
    "title": "In Class Exercise 07",
    "section": "",
    "text": "This is a type of graph called geofacet.\n\n\n\nYou rightclick Xcoord / Ycoord and turn data into Geographical Role. Then Xcoord go Column and Y coord go Rows.\nPut Name to Details, so the Plot can show all the Pools outlets in Singapore\nYou can also add in Channel as new\nRight click > Calculated Field > Insert code\n\nIn Tableau, you can change the Map of Tableau > Edit Location to change the background map before mapping Geo spatial data.\n\nNext if you want to bring in our OWN map data (sph format) to use on the Tableau background automatic map.\nJOIN 2 data sources (Map data) and create Geographical graph\nAdd > More > Choose data."
  },
  {
    "objectID": "InClassExercise/inclass07/inclass07.html#r-and-geographical-data-sf-package",
    "href": "InClassExercise/inclass07/inclass07.html#r-and-geographical-data-sf-package",
    "title": "In Class Exercise 07",
    "section": "R and Geographical data : SF package",
    "text": "R and Geographical data : SF package\n\npacman::p_load(sf, tmap, tidyverse)\n\n\nsgpools <- read_csv(\"C:/thomashoanghuy/ISSS608-VAA/InClassExercise/inclass07/aspatial/SGPools_svy21.csv\")\n\n\nsgpools_sf <- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nUse original data sgpools, and create a new variable “coords” with includes 2 XCOORD and YCOORD column,. Always start with X coordinate ( longitude) then Y coordinate ( latitude ).\ncrs = 3414 is the PROJECTION code ( unique identifiers for the projection codes which countries will use. *Search for the system EPSG:3414)\n\nhead(sgpools_sf)\n\nSimple feature collection with 6 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 20117.93 ymin: 26525.7 xmax: 32238.69 ymax: 46987.32\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 6 × 6\n  NAME                 ADDRESS POSTC…¹ OUTLE…² Gp1Gp…³            geometry\n  <chr>                <chr>     <dbl> <chr>     <dbl>         <POINT [m]>\n1 Livewire (Marina Ba… 2 Bayf…   18972 Branch        5 (30841.56 29598.56)\n2 Livewire (Resorts W… 26 Sen…   98138 Branch       11  (26703.87 26525.7)\n3 SportsBuzz (Kranji)  Lotus …  738078 Branch        0 (20117.93 44888.06)\n4 SportsBuzz (PoMo)    1 Sele…  188306 Branch       44 (29776.95 31382.18)\n5 Prime Serangoon Nor… Blk 54…  552542 Branch        0 (32238.69 39518.76)\n6 Singapore Pools Woo… 1A Woo…  731001 Branch        3 (21012.15 46987.32)\n# … with abbreviated variable names ¹​POSTCODE, ²​`OUTLET TYPE`,\n#   ³​`Gp1Gp2 Winnings`\n\n\nUse tmap (view) mode can zoom and out of the map ( more interactive)\nIf you use tmap_mode plot, then the graph will be static.\n\ntmap_mode('view')\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\ntmap_mode('plot')\n\nLet’s make it more proportional\n\ntmap_mode('view')\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\ntmap_mode('plot')\n\nWe can use one of the ordinal categorical data as colors\n\ntmap_mode('view')\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\ntmap_mode('plot')"
  },
  {
    "objectID": "InClassExercise/inclass07/inclass07.html#section",
    "href": "InClassExercise/inclass07/inclass07.html#section",
    "title": "In Class Exercise 07",
    "section": "",
    "text": "Choropleth Mapping\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\nmpsz <- st_read(dsn = \"C:/thomashoanghuy/ISSS608-VAA/InClassExercise/inclass07/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\thomashoanghuy\\ISSS608-VAA\\InClassExercise\\inclass07\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\nhead(mpsz)\n\nSimple feature collection with 6 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 24468.89 ymin: 28369.47 xmax: 32362.39 ymax: 30542.74\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n6        6          7 ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6         BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6 29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n\n\n\npopdata <- read_csv(\"C:/thomashoanghuy/ISSS608-VAA/InClassExercise/inclass07/aspatial/respopagesextod2011to2020.csv\")\n\n\npopdata2020 <- popdata %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup()%>%\n  pivot_wider(names_from=AG, \n              values_from=POP) %>%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %>%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%>%\nmutate(`AGED`=rowSums(.[16:21])) %>%\nmutate(`TOTAL`=rowSums(.[3:21])) %>%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\nmutate is equal to compute\nmutate(YOUNG = rowSums(.[3:6]) +rowSums(.[12])) %>% is creating new column YOUNG, where it is the sum of row 3:6 and row 12\nRelational Join\nIn order to join, we need to turn character in PA and SZ to uppercase by this code.\n\npopdata2020 <- popdata2020 %>%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %>%\n  filter(`ECONOMY ACTIVE` > 0)\n\nThen we can do a left join with the geometric data mpsz (similar to SQL left join) Note the LEFT HAND SIDE (the first one) MUST always be a the geometric layers ( means the background map) and not the aspatial data (in this case the popdata2020)\n\nmpsz_pop2020 <- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "InClassExercise/inclass07/inclass07.html#analytical-mapping",
    "href": "InClassExercise/inclass07/inclass07.html#analytical-mapping",
    "title": "In Class Exercise 07",
    "section": "Analytical Mapping",
    "text": "Analytical Mapping"
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#ii-by-region",
    "href": "TakehomeEx/TakehomeEx04.html#ii-by-region",
    "title": "Take Home Exercise 04",
    "section": "II) By Region",
    "text": "II) By Region\n\nmthlyimport <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/monthly data by countries.xlsx\", sheet = \"T1\")\n\nmthlyexport <- read_excel(\"C:/thomashoanghuy/ISSS608-VAA/TakehomeEx/data3/monthly data by countries.xlsx\", sheet = \"T2\")\n\nLet’s create a sub dataset for regions only, which consist of 6 areas, import and export\n1) America\n2) Asia\n3) Europe\n4) Oceania\n5) Africa\n\nImport Data\n\nregions_mthlyimport = mthlyimport[1:6,]\n\n\nregions_mthlyexport = mthlyexport[1:6,]\n\nCombine 2 dataframes and transpose the data\n\nregions_mthlytrade1 = rbind(regions_mthlyimport , regions_mthlyexport)\nregions_mthlytrade= as.data.frame(t(regions_mthlytrade1)) \ncolnames(regions_mthlytrade) <- regions_mthlytrade[1,]\nregions_mthlytrade <- regions_mthlytrade[-1,]\n\n\nregions_mthlytrade <- regions_mthlytrade %>% \n  rownames_to_column(var = \"Month-Year\")\n\nReverse sort and convert the format of Month-Year to time and trade numbers into numeric format.\n\nregions_mthlytrade <- regions_mthlytrade[nrow(regions_mthlytrade):1, ]\nrownames(regions_mthlytrade) <- rownames(regions_mthlytrade[nrow(regions_mthlytrade):1, ])\n\n\nregions_mthlytrade$`Month-Year` <- as.Date(paste0(regions_mthlytrade$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\n\n\nnames(regions_mthlytrade)[2:7] <- c(\"Total Import\", \"America Import\" , \"Asia Import\" , \"Europe Import\" , \"Oceania Import\", \"Africa Import\")\n\n\nnames(regions_mthlytrade)[8:13] <- c(\"Total Export\", \"America Export\" , \"Asia Export\" , \"Europe Export\" , \"Oceania Export\", \"Africa Export\")\n\n\nhead(regions_mthlytrade)\n\n  Month-Year Total Import America Import Asia Import Europe Import\n1 2020-01-01   41180224.0         5844.1     27128.1        6859.7\n2 2020-02-01   39472637.0         5314.1     26588.1        6209.6\n3 2020-03-01   40433029.0         5910.8     26783.6        6333.3\n4 2020-04-01   35878828.0         5183.5     24534.5        5150.6\n5 2020-05-01   31458238.0         4259.0     21718.9        4629.0\n6 2020-06-01   35120892.0         4686.2     24779.3        4960.7\n  Oceania Import Africa Import Total Export America Export Asia Export\n1          819.7         528.6   44501656.0         5557.8     31668.0\n2          694.7         666.1   43512320.0         5870.7     29713.9\n3          845.9         559.4   45800019.0         6021.1     32534.9\n4          637.6         372.6   39946596.0         6569.1     26245.7\n5          441.8         409.6   36482259.0         5922.2     24437.8\n6          456.4         238.2   40640766.0         4895.5     28994.5\n  Europe Export Oceania Export Africa Export\n1        4432.5         2121.6         721.8\n2        4996.4         2090.4         841.0\n3        4468.2         1859.3         916.5\n4        5051.3         1511.8         568.8\n5        4398.0         1311.4         412.8\n6        4880.4         1418.3         452.1\n\n\nCreate dataframe for each region\n\namerica_data = regions_mthlytrade[, grepl(\"America\", names(regions_mthlytrade))]\nasia_data = regions_mthlytrade[, grepl(\"Asia\", names(regions_mthlytrade))]\neurope_data = regions_mthlytrade[, grepl(\"Europe\", names(regions_mthlytrade))]\noceania_data = regions_mthlytrade[, grepl(\"Oceania\", names(regions_mthlytrade))]\nafrica_data = regions_mthlytrade[, grepl(\"Africa\", names(regions_mthlytrade))]\ntotalregion_data = regions_mthlytrade[, grepl(\"Total\", names(regions_mthlytrade))]\n\n\namerica_data <- as.data.frame(lapply(america_data, function(x) as.numeric(as.character(x))))\nasia_data <- as.data.frame(lapply(asia_data, function(x) as.numeric(as.character(x))))\neurope_data <- as.data.frame(lapply(europe_data, function(x) as.numeric(as.character(x))))\noceania_data <- as.data.frame(lapply(oceania_data, function(x) as.numeric(as.character(x))))\nafrica_data <- as.data.frame(lapply(africa_data, function(x) as.numeric(as.character(x))))\ntotalregion_data <- as.data.frame(lapply(totalregion_data, function(x) as.numeric(as.character(x))))\n\n\namerica_data$Month_Year <- regions_mthlytrade$`Month-Year`\nasia_data$Month_Year <- regions_mthlytrade$`Month-Year`\neurope_data$Month_Year <- regions_mthlytrade$`Month-Year`\noceania_data$Month_Year <- regions_mthlytrade$`Month-Year`\nafrica_data$Month_Year <- regions_mthlytrade$`Month-Year`\ntotalregion_data$Month_Year <- regions_mthlytrade$`Month-Year`\n\n\n\nAMERICA TRADE Volume\n\namerica_data <- america_data %>%\n  mutate(fill = ifelse(America.Import > America.Export, \"deficit\", \"surplus\"))\n\namericaplot = ggplot(america_data) +\n  geom_line(aes(x = Month_Year, y = America.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = America.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Month_Year, ymin = America.Import, ymax = America.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"America Trade volume\", title = \"Americas Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\namericaplot\n\n\n\n\nAs you can see, the blue line represents the monthly Import number from America from Jan 2020 to Jan 2023. While dark red line represents the monthly Export number from America in the same period. With geom_braid color the difference area between the two lines in grey color, we can see the difference between the 2 lines clearly.\nThroughout the time period, the Export figure was always above the blue line, which indicates Singapore was maintaining a trade surplus with Americas. However, as the grey area was getting smaller, proving Singapore trade surplus with America is getting smaller. And in 2021, the blue Import line started to cross above red Export line, this indicates Singapore import from America had exceeded export volume and Singapore started to enter into trade deficits versus Americas region.\nThis trade deficit has continued and even grew bigger in 2022, as evidenced by the bigger brown area between the 2 lines. This concludes that after Covid, Singapore from trade surplus position, has turned into deficit versus Americas regions\n\n\nASIA TRADE VOLUME\n\nasia_data <- asia_data %>%\n  mutate(fill = ifelse(Asia.Import > Asia.Export, \"deficit\", \"surplus\"))\n\nasiaplot = ggplot(asia_data) +\n  geom_line(aes(x = Month_Year, y = Asia.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Asia.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Month_Year, ymin = Asia.Import, ymax = Asia.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Asia Trade volume\", title = \"Asia Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\n\nasiaplot\n\n\n\n\n\n\nEUROPE TRADE VOLUME\n\neurope_data <- europe_data %>%\n  mutate(fill = ifelse(Europe.Import > Europe.Export, \"deficit\", \"surplus\"))\n\neuropeplot = ggplot(europe_data) +\n  geom_line(aes(x = Month_Year, y = Europe.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Europe.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Month_Year, ymin = Europe.Import, ymax = Europe.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Europe Trade volume\", title = \"Europe Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\n\neuropeplot\n\n\n\n\n\n\nOCEANIA TRADE VOLUME\n\noceania_data <- oceania_data %>%\n  mutate(fill = ifelse(Oceania.Import > Oceania.Export, \"deficit\", \"surplus\"))\n\noceaniaplot = ggplot(oceania_data) +\n  geom_line(aes(x = Month_Year, y = Oceania.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Oceania.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Month_Year, ymin = Oceania.Import, ymax = Oceania.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Oceania Trade volume\", title = \"Oceania Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\noceaniaplot\n\n\n\n\n\n\nAFRICA TRADE VOLUME\n\nafrica_data <- africa_data %>%\n  mutate(fill = ifelse(Africa.Import > Africa.Export, \"deficit\", \"surplus\"))\n\nafricaplot = ggplot(africa_data) +\n  geom_line(aes(x = Month_Year, y = Africa.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Africa.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Month_Year, ymin = Africa.Import, ymax = Africa.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Africa Trade volume\", title = \"Africa Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\nafricaplot\n\n\n\n\n\n\nOVERALL TRADE VOLUME\n\ntotalregion_data <- totalregion_data %>%\n  mutate(fill = ifelse(Total.Import > Total.Export, \"deficit\", \"surplus\"))\n\noverallplot = ggplot(totalregion_data) +\n  geom_line(aes(x = Month_Year, y = Total.Import), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Month_Year, y = Total.Export), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Month_Year, ymin = Total.Import, ymax = Total.Export, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Overall Trade volume\", title = \"Overall Monthly Trade Balance\") +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\noverallplot\n\n\n\n\n\n\nDashboard for Regions Data\n\n(americaplot + asiaplot + europeplot) / (oceaniaplot + africaplot + overallplot)\n\n\n\n\nIn this dashboard, we can compare Singapore monthly trade blances (surplus / deficits) versus 5 main regions of world geography. In term of volume, Asia trade balance is the highest, with both import and export numbers reaching to the height of more than 40 billions per month, while Oceania trade number is the lowest reaching no more than 4 billions SGD monthly. The grey area represents the periods where Singapore is enjoying trade surplus against its trading partners, while the brown area is where Singapore dipped into trade deficit monthly.\nIn term of trend, Americas portrayed a reverse between 2020 to 2022, where during Covid lockdown, Singapore was holding trade surplus with Americas, but once lockdown was lifted, Singapore has turned into trade deficit versus Americas.\nIn Oceania, and Africa, Singapore has been maintaining positive trade surplus, regardless of the covid lockdown. The noticeable difference is the grey area (represents the trade surplus if the red line is above the blue line) is getting bigger in 2022, compared to previous years\nIn Europe, Singapore has always been having trade deficit (blue line is above the red line), and the deficit (brown area) seems to get bigger from 2020 to 2022, too as the covid lockdown started to lift. One would expect that due to Russian invasion, which disrupted the transportation and production of goods and services in Europe, Singapore as an import partner, would have its import decrease and smaller trade deficit. But apparently, the trade deficit gets even larger as per this evidence.\nOverall plot, we can see that it mimics the trend of 2 biggest trading regional partners with Singapore, Asia and Americas, where the export and import volumes were trending up until mid year 2022, and they both started to trend downward. This can be the impact of Russian invasion on Ukraine, combined with huge inflation and tightening of money supplies by most superpowers around the world, lead to the dampening of trade volume.\nBoth the import and export volumes have pickup tremendeously from 2020 to 2022. However, Americas and Asia graphs above have shown, the second half of 2022 have seen an reverse in the uptrend of trade volumes, signalling that there may be a cool-down in the trade activities, and possibly an negative indicator for economic growth."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#what-about-other-countries",
    "href": "TakehomeEx/TakehomeEx04.html#what-about-other-countries",
    "title": "Take Home Exercise 04",
    "section": "What about other countries?",
    "text": "What about other countries?\nUsing the above code chunks, we can examine other countries, which are major trading partners with Singapore. Let’s check out some of them.\n\nChina\n\nImport Data\n\nchina_mthlyimport = mthlyimport[grep(\"China\", mthlyimport$`Data Series`, ignore.case = TRUE), ]\n\n\nchina_mthlyexport = mthlyexport[grep(\"China\", mthlyexport$`Data Series`, ignore.case = TRUE), ]\n\nCombine 2 dataframes and transpose the data\n\nchina_mthlytrade1 = rbind(china_mthlyimport , china_mthlyexport)\nchina_mthlytrade= as.data.frame(t(china_mthlytrade1)) \ncolnames(china_mthlytrade) <- china_mthlytrade[1,]\nchina_mthlytrade <- china_mthlytrade[-1,]\n\n\nchina_mthlytrade <- china_mthlytrade %>% \n  rownames_to_column(var = \"Month-Year\")\n\nReverse sort and convert the format of Month-Year to time and trade numbers into numeric format.\n\nchina_mthlytrade <- china_mthlytrade[nrow(china_mthlytrade):1, ]\nrownames(china_mthlytrade) <- rownames(china_mthlytrade[nrow(china_mthlytrade):1, ])\n\n\nchina_mthlytrade$`Month-Year` <- as.Date(paste0(china_mthlytrade$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\nnames(china_mthlytrade)[2:3] <- c(\"China Import\", \"China Export\")\n\n\nchina_mthlytrade$`China Import` = as.numeric(china_mthlytrade$`China Import`)\nchina_mthlytrade$`China Export` = as.numeric(china_mthlytrade$`China Export`)\n\nNow we can plot our data\n\nchina_mthlytrade <- china_mthlytrade %>%\n  mutate(fill = ifelse( china_mthlytrade$`China Import`> china_mthlytrade$`China Export`, \"deficit\", \"surplus\"))\n\nchinaplot = ggplot(china_mthlytrade) +\n  geom_line(aes(x = china_mthlytrade$`Month-Year`, y = china_mthlytrade$`China Import`), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = china_mthlytrade$`Month-Year`, y = china_mthlytrade$`China Export`), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = china_mthlytrade$`Month-Year`, ymin = china_mthlytrade$`China Export`, ymax = china_mthlytrade$`China Import`, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"China Trade volume\", title = \"China Monthly Trade Balance\" ) +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\nchinaplot\n\n\n\n\nChina is one of the Singapore’s largest trade partner. As you can see from the above charts, both Singapore import and export volumes with China have increased from 2020 to 2023. The numbers have more than doubled from 4 billions to 9 billions. The dark red line represented the Export, while blue line represents the monthly import. A\nAt beginning of 2020, the brown area by geom_braid suggested that Singapore has a small trade deficit with China. However from April 2020 all to April 2022, we can see that the red line always stayed above the blue line, which suggest Singapore was maintaining the trade surplus ( which is represented by the grey area). Understandably, this is due to China pursued the zero Covid policy which severely affected their manufacturing capabilities and thus Singapore cannot import from China as much.\nAs the Russian invasion happened mid-2022 and covid lockdown lifted by Singapore, the trade balance has turned deficit again, by sharp decrease of Singapore export to China.\nHowever, trade deficit may not be a bad case in this scenario, the reason is SGD is stronger than Chinese yuan. In a trade deficit environment, that allows Singapore to import more goods and service from China at lower cost ( cuz 1 SGD can purchase more of Chinese goods) and ultimately benefit the consumers in Singapore.\n\n\n\nMalaysia\nLet’s reuse the same code sample and apply on other countries.\n\nMalaysia_mthlyimport = mthlyimport[grep(\"Malaysia\", mthlyimport$`Data Series`, ignore.case = TRUE), ]\n\n\nMalaysia_mthlyexport = mthlyexport[grep(\"Malaysia\", mthlyexport$`Data Series`, ignore.case = TRUE), ]\n\nCombine 2 dataframes and transpose the data\n\nMalaysia_mthlytrade1 = rbind(Malaysia_mthlyimport , Malaysia_mthlyexport)\nMalaysia_mthlytrade= as.data.frame(t(Malaysia_mthlytrade1)) \ncolnames(Malaysia_mthlytrade) <- Malaysia_mthlytrade[1,]\nMalaysia_mthlytrade <- Malaysia_mthlytrade[-1,]\n\n\nMalaysia_mthlytrade <- Malaysia_mthlytrade %>% \n  rownames_to_column(var = \"Month-Year\")\n\nReverse sort and convert the format of Month-Year to time and trade numbers into numeric format.\n\nMalaysia_mthlytrade <- Malaysia_mthlytrade[nrow(Malaysia_mthlytrade):1, ]\nrownames(Malaysia_mthlytrade) <- rownames(Malaysia_mthlytrade[nrow(Malaysia_mthlytrade):1, ])\n\n\nMalaysia_mthlytrade$`Month-Year` <- as.Date(paste0(Malaysia_mthlytrade$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\nnames(Malaysia_mthlytrade)[2:3] <- c(\"Malaysia Import\", \"Malaysia Export\")\n\n\nMalaysia_mthlytrade$`Malaysia Import` = as.numeric(Malaysia_mthlytrade$`Malaysia Import`)\nMalaysia_mthlytrade$`Malaysia Export` = as.numeric(Malaysia_mthlytrade$`Malaysia Export`)\n\nNow we can plot our data\n\ntail(Malaysia_mthlytrade)\n\n   Month-Year Malaysia Import Malaysia Export\n32 2022-08-01         7225607         6150507\n33 2022-09-01         7672003         5884698\n34 2022-10-01         6417377         6233818\n35 2022-11-01         6773423         5557119\n36 2022-12-01         6017970         5154779\n37 2023-01-01         4840965         4987116\n\n\n\nMalaysia_mthlytrade <- Malaysia_mthlytrade %>%\n  mutate(fill = ifelse( Malaysia_mthlytrade$`Malaysia Import`> Malaysia_mthlytrade$`Malaysia Export`, \"deficit\", \"surplus\"))\n\nMalaysiaplot = ggplot(Malaysia_mthlytrade) +\n  geom_line(aes(x = Malaysia_mthlytrade$`Month-Year`, y = Malaysia_mthlytrade$`Malaysia Import`), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Malaysia_mthlytrade$`Month-Year`, y = Malaysia_mthlytrade$`Malaysia Export`), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Malaysia_mthlytrade$`Month-Year`, ymin = Malaysia_mthlytrade$`Malaysia Export`, ymax = Malaysia_mthlytrade$`Malaysia Import`, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Malaysia Trade volume\", title = \"Malaysia Monthly Trade Balance\" ) +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\nMalaysiaplot\n\n\n\n\nFor Malaysia, Singapore has always been maintaining a trade deficit with northern neighbour Malaysia throughout 2020 to 2023. However as the 2023 coming, the brown area (represents the trade deficit) has been getting smaller, proving that there could be a change in near future. Singapore may actually become net export partner to Malaysia.\nSimilar to China above, a SGD is stronger than Malaysian ringgit, which allows 1 SGD to purchase more of Malaysian imported goods and services, this may benefit Singapore consumers and boost Singapore economy. So it is understandable that Singapore government wants to maintain trade deficit with Malaysia.\nBoth the import and export volumes have pickup tremendeously from 2020 to 2022. However similar to Americas and Asia graphs above, the second half of 2022 have seen an reverse in the uptrend of trade volumes, signalling that there may be a cooldown in the trade activities, and possibly an negative indicator for economic growth.\n\n\nVietnam\n\nVietnam_mthlyimport = mthlyimport[grep(\"Vietnam\", mthlyimport$`Data Series`, ignore.case = TRUE), ]\n\n\nVietnam_mthlyexport = mthlyexport[grep(\"Vietnam\", mthlyexport$`Data Series`, ignore.case = TRUE), ]\n\nCombine 2 dataframes and transpose the data\n\nVietnam_mthlytrade1 = rbind(Vietnam_mthlyimport , Vietnam_mthlyexport)\nVietnam_mthlytrade= as.data.frame(t(Vietnam_mthlytrade1)) \ncolnames(Vietnam_mthlytrade) <- Vietnam_mthlytrade[1,]\nVietnam_mthlytrade <- Vietnam_mthlytrade[-1,]\n\n\nVietnam_mthlytrade <- Vietnam_mthlytrade %>% \n  rownames_to_column(var = \"Month-Year\")\n\nReverse sort and convert the format of Month-Year to time and trade numbers into numeric format.\n\nVietnam_mthlytrade <- Vietnam_mthlytrade[nrow(Vietnam_mthlytrade):1, ]\nrownames(Vietnam_mthlytrade) <- rownames(Vietnam_mthlytrade[nrow(Vietnam_mthlytrade):1, ])\n\n\nVietnam_mthlytrade$`Month-Year` <- as.Date(paste0(Vietnam_mthlytrade$`Month-Year`, \" 01\"), format = \"%Y %b %d\")\nnames(Vietnam_mthlytrade)[2:3] <- c(\"Vietnam Import\", \"Vietnam Export\")\n\n\nVietnam_mthlytrade$`Vietnam Import` = as.numeric(Vietnam_mthlytrade$`Vietnam Import`)\nVietnam_mthlytrade$`Vietnam Export` = as.numeric(Vietnam_mthlytrade$`Vietnam Export`)\n\nNow we can plot our data\n\nVietnam_mthlytrade <- Vietnam_mthlytrade %>%\n  mutate(fill = ifelse( Vietnam_mthlytrade$`Vietnam Import`> Vietnam_mthlytrade$`Vietnam Export`, \"deficit\", \"surplus\"))\n\nVietnamplot = ggplot(Vietnam_mthlytrade) +\n  geom_line(aes(x = Vietnam_mthlytrade$`Month-Year`, y = Vietnam_mthlytrade$`Vietnam Import`), stat = 'identity', color = \"blue\", size = 1) +\n  geom_line(aes(x = Vietnam_mthlytrade$`Month-Year`, y = Vietnam_mthlytrade$`Vietnam Export`), stat = 'identity', color = \"darkred\", size = 1) +\n  geom_braid(aes(x = Vietnam_mthlytrade$`Month-Year`, ymin = Vietnam_mthlytrade$`Vietnam Export`, ymax = Vietnam_mthlytrade$`Vietnam Import`, fill = fill), alpha = 0.5) +\n  labs(x = \"Year\", y = \"Vietnam Trade volume\", title = \"Vietnam Monthly Trade Balance\" ) +\n  scale_fill_manual(name = \"Trade Balance\",\n                    values = c(\"deficit\" = \"brown\" , \"surplus\" = \"grey\"))\n\nVietnamplot\n\n\n\n\nVietnam is one of the huge agricultural export country in the South East Asia region, it’s popular belief that a lot of finished consumer goods, and agricultural products in Singapore is imported from Vietnam, however the above graph depicts that Singapore is actually a net-export country to Vietnam where the trade surplus versus Vietnam is huge. Throughout covid, 2020 to 2022, the import of Singapore from Vietnam is actually relatively stable, proving that covid 19 did not affect Vietnam manufacturing of exports to Singapore.\nBut with 1 SGD = 17,000 VND (as SGD is much stronger currency), this also means Singapore average consumers are paying higher prices for Vietnamese goods and services, and this may intensify the effect of inflation on Singapore population. This is actually not good, considering Singapore inflation is hitting record high in 2022."
  },
  {
    "objectID": "TakehomeEx/TakehomeEx04.html#self-relfection",
    "href": "TakehomeEx/TakehomeEx04.html#self-relfection",
    "title": "Take Home Exercise 04",
    "section": "Self-Relfection",
    "text": "Self-Relfection\nThis is a great and very challenging exercise, that teaches me how to deal with Time-series data. In term of Data wrangling, I learnt different ways to manipulate tables, to slice and subset as well as transform the data to fit the suitable formats to be used to plot graph.\nMoreover, I have learned and put into practice how to draw graphs such as Cycle Plot, the Geom_braid as well as I also learned we can design and use each geom functions as its own graphs before combining them under ggplot.\nI have also learned to combine multiple plots into trellis style dashboard, something I was not able to do a few week earlier.\nArea of improvement: still data wrangling. I believe that there are better ways to manipulate data tables, leveraging on mutate() and group_by() function.\nI think the best way to learn is backward reverse engineering when I can see / imagine the result desired dataframe (which will be fed into ggplot) and compare them versus the raw data table and figure which methods / functions that can allow me to transform from raw data table to desired datasets."
  }
]