---
title: "In-Class Exercise 4"
date : "4 Feb 2023"
date-modified: "`r Sys.Date()`"
format : html
execute: 
  echo: true
  eval: true
  warning: true
editor: visual
---

```{r}
pacman:: p_load(plotly , DT , patchwork , ggstatsplot,  tidyverse)
```

```{r}
exam_data = read_csv("data/Exam_data.csv")
```

```{r}
plot_ly(data = exam_data,
        x = ~ENGLISH,
        y = ~MATHS,
        color = ~RACE)
```

```{r}
p = ggplot(data=exam_data, 
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(dotsize = 1) +
  coord_cartesian(xlim=c(-100,100),
                  ylim=c(-100,100))

ggplotly(p)
```

```{r}
ggbetweenstats(
  data = exam_data,
  x = GENDER, 
  y = MATHS,
  type = "p",
  messages = FALSE
)
```

```{r}
ggscatterstats(
  data = exam_data,
  x = MATHS, 
  y = ENGLISH,
  marginal = TRUE
)
```



```{r}
pacman::p_load(readxl, performance, parameters, see)
```
```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls", "data")
car_resale
```

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM + 
              Weight + Guarantee_Period, data = car_resale)
```

<!-- *LM is a list square model, where we can build a multiple linear regression model to predict the price of the cars based on these above predictors-->


Comment : can use gtsummary::tbl_regression to capture and the model and translate it into data table format.
# ```{r}
# table1 = tbl_regression(model1, intercept = TRUE)
# ```


Comment: Check for multicollinearity by diagnostic test and visualize the results using check_collinearity() of the performance package. using VIF ( variance inflation factor)

It will tell you give 2 predictors that have low correlation and 2 predictors that have high correlation.
after that we can even use plot to check the collinearity.
Above 10 >= high correlated, 
below 3 >= no sign of multi collinearity.

```{r}
check_collinearity(model)
```

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```


Comment: Checking Normality of the model

```{r}
model1 <- lm(Price ~ Age_08_04 + KM + 
              Weight + Guarantee_Period, data = car_resale)
```



```{r}
check_n <- check_normality(model1)
plot(check_n)
```

```{r}
check_model(model1)
```

```{r}
plot(parameters(model1))
```
```{r}
ggcoefstats(model1, 
            output = "plot")
```


```{r}
my_sum <- exam_data %>%
  group_by(RACE) %>%
  summarise(
    n=n(),
    mean=mean(MATHS),
    sd=sd(MATHS)
    ) %>%
  mutate(se=sd/sqrt(n-1))
```

```{r}
my_sum
```



```{r}
ggplot(my_sum) +
  geom_errorbar(
    aes(x=RACE, 
        ymin=mean-se, 
        ymax=mean+se), 
    width=0.2, 
    colour="black", 
    alpha=0.9, 
    size=0.5) + 
  
  geom_point(aes
           (x=RACE, 
            y=mean), 
           stat="identity", 
           color="red",
           size = 1.5,
           alpha=1) +
  ggtitle("Standard error of mean 
          maths score by rac")
```
# ```{r}
# my_sum %>%
#   ggplot(aes(x = RACE, 
#              y = MATHS)) +
#   stat_pointinterval() +  
#   labs(
#     title = "Visualising confidence intervals of mean math score",
#     subtitle = "Mean Point + Multiple-interval plot")
# ```


